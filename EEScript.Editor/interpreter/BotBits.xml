<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BotBits</name>
    </assembly>
    <members>
        <member name="T:BotBits.Events.DisposedEvent">
            <summary>
                Occurs after <see cref="T:BotBits.BotBitsClient" /> has been disposed.
            </summary>
            <seealso cref="T:BotBits.Event`1" />
        </member>
        <member name="T:BotBits.Events.DisposingEvent">
            <summary>
                Occurs before <see cref="T:BotBits.BotBitsClient" /> is disposed.
            </summary>
            <seealso cref="T:BotBits.Event`1" />
        </member>
        <member name="T:BotBits.Events.BackgroundPlaceEvent">
            <summary>
                Occurs when a background block is placed in the world.
            </summary>
            <seealso cref="T:BotBits.Events.PlaceEvent`2" />
        </member>
        <member name="T:BotBits.Events.ForegroundPlaceEvent">
            <summary>
                Occurs when a foreground block is placed in the world.
            </summary>
            <seealso cref="T:BotBits.Events.PlaceEvent`2" />
        </member>
        <member name="T:BotBits.Events.PlaceEvent`2">
            <summary>
                Base for events that occur when a block is placed in the world.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TBlock">The type of the block.</typeparam>
            <seealso cref="T:BotBits.Event`1" />
        </member>
        <member name="T:BotBits.Events.QueueChatEvent">
            <summary>
                Occurs when a new chat message is added to the chat send queue.
            </summary>
            <seealso cref="T:BotBits.Event`1" />
        </member>
        <member name="P:BotBits.Events.QueueChatEvent.Message">
            <summary>
                Gets or sets the chat message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:BotBits.Events.QueueChatEvent.Cancelled">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:BotBits.Events.QueueChatEvent" /> is cancelled.
            </summary>
            <value><c>true</c> if cancelled; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:BotBits.Events.CanAddToCrewsEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.CanAddToCrewsEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="T:BotBits.Events.LobbyPreviewEnabledEvent">
            <summary>
                Occurs when lobby preview is enabled or disabled.
            </summary>
            <seealso cref="T:BotBits.Events.ReceiveEvent`1" />
        </member>
        <member name="P:BotBits.Events.LobbyPreviewEnabledEvent.Enabled">
            <summary>
                Gets or sets a value indicating whether lobby preview is enabled
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:BotBits.Events.JoinCompleteEvent">
            <summary>
                Occurs when joining world is completed.
            </summary>
            <seealso cref="T:BotBits.Events.ReceiveEvent`1" />
        </member>
        <member name="M:BotBits.Events.JoinCompleteEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.JoinCompleteEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="T:BotBits.Events.MinimapEnabledEvent">
            <summary>
                Occurs when minimap is enabled or disabled.
            </summary>
            <seealso cref="T:BotBits.Events.ReceiveEvent`1" />
        </member>
        <member name="P:BotBits.Events.MinimapEnabledEvent.Enabled">
            <summary>
                Gets or sets a value indicating whether minimap is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:BotBits.Events.GoldBorderEvent">
            <summary>
                Occurs when someone enables or disables the gold smiley border.
            </summary>
            <seealso cref="T:BotBits.Events.PlayerEvent`1" />
        </member>
        <member name="M:BotBits.Events.GoldBorderEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.MutedEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="P:BotBits.Events.GoldBorderEvent.GoldBorder">
            <summary>
                Value indicating whether the player is wearing gold smiley border.
            </summary>
            <value><c>true</c> if muted; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:BotBits.Events.RestoreProgressEvent">
            <summary>
                Occurs when your campaign progress is restored.
            </summary>
            <seealso cref="T:BotBits.Events.PlayerEvent`1" />
        </member>
        <member name="M:BotBits.Events.RestoreProgressEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.RestoreProgressEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="P:BotBits.Events.RestoreProgressEvent.BlueCoinPoints">
            <summary>
                Gets or sets the blue coin positions.
            </summary>
            <value>The blue coin positions.</value>
        </member>
        <member name="P:BotBits.Events.RestoreProgressEvent.GoldCoinPoints">
            <summary>
                Gets or sets the gold coin positions.
            </summary>
            <value>The gold coin positions.</value>
        </member>
        <member name="P:BotBits.Events.RestoreProgressEvent.PurpleSwitches">
            <summary>
                Gets or sets the purple switches.
            </summary>
            <value>The purple switches.</value>
        </member>
        <member name="P:BotBits.Events.RestoreProgressEvent.CheckpointY">
            <summary>
                Gets or sets the checkpoint y coordinate.
            </summary>
            <value>The checkpoint y coordinate.</value>
        </member>
        <member name="P:BotBits.Events.RestoreProgressEvent.CheckpointX">
            <summary>
                Gets or sets the checkpoint x coordinate.
            </summary>
            <value>The checkpoint x coordinate.</value>
        </member>
        <member name="P:BotBits.Events.RestoreProgressEvent.Deaths">
            <summary>
                Gets or sets the amount deaths.
            </summary>
            <value>The deaths.</value>
        </member>
        <member name="P:BotBits.Events.RestoreProgressEvent.BlueCoins">
            <summary>
                Gets or sets the amount of collected blue coins.
            </summary>
            <value>The blue coins.</value>
        </member>
        <member name="P:BotBits.Events.RestoreProgressEvent.GoldCoins">
            <summary>
                Gets or sets the amount of collected gold coins.
            </summary>
            <value>The gold coins.</value>
        </member>
        <member name="P:BotBits.Events.RestoreProgressEvent.SpeedX">
            <summary>
                Gets or sets the speed x.
            </summary>
            <value>The speed x.</value>
        </member>
        <member name="P:BotBits.Events.RestoreProgressEvent.SpeedY">
            <summary>
                Gets or sets the speed y.
            </summary>
            <value>The speed y.</value>
        </member>
        <member name="P:BotBits.Events.RestoreProgressEvent.BlockX">
            <summary>
                Gets the block x.
            </summary>
            <value>The block x.</value>
        </member>
        <member name="P:BotBits.Events.RestoreProgressEvent.BlockY">
            <summary>
                Gets the block y.
            </summary>
            <value>The block y.</value>
        </member>
        <member name="P:BotBits.Events.RestoreProgressEvent.X">
            <summary>
                Gets or sets the user coordinate x.
            </summary>
            <value>The user position x.</value>
        </member>
        <member name="P:BotBits.Events.RestoreProgressEvent.Y">
            <summary>
                Gets or sets the user coordinate y.
            </summary>
            <value>The user position y.</value>
        </member>
        <member name="T:BotBits.Events.MutedEvent">
            <summary>
                Occurs when you successfully muted or un-umted someone.
            </summary>
            <seealso cref="T:BotBits.Events.PlayerEvent`1" />
        </member>
        <member name="M:BotBits.Events.MutedEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.MutedEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="P:BotBits.Events.MutedEvent.Muted">
            <summary>
                Gets or sets a value indicating whether player is muted.
            </summary>
            <value><c>true</c> if muted; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:BotBits.Events.SmileyEvent">
            <summary>
                Occurs when someone changes their smiley.
            </summary>
            <seealso cref="T:BotBits.Events.PlayerEvent`1" />
        </member>
        <member name="M:BotBits.Events.SmileyEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.SmileyEvent" /> class.
            </summary>
            <param name="message">The EE message.</param>
            <param name="client"></param>
        </member>
        <member name="P:BotBits.Events.SmileyEvent.Smiley">
            <summary>
                Gets or sets the smiley.
            </summary>
            <value>The smiley.</value>
        </member>
        <member name="T:BotBits.Events.SendEvent`1">
            <summary>
                Raised when a queued SendMessage is sent.
            </summary>
            <remarks>This event is not delegated to the scheduler for performance optimizations.</remarks>
        </member>
        <member name="T:BotBits.Events.BlueCoinEvent">
            <summary>
                Occurs when a player's gold coin count changes.
            </summary>
            <seealso cref="T:BotBits.Event`1" />
        </member>
        <member name="P:BotBits.Events.BlueCoinEvent.Player">
            <summary>
                Gets the player.
            </summary>
            <value>The player.</value>
        </member>
        <member name="P:BotBits.Events.BlueCoinEvent.BlueCoins">
            <summary>
                Gets the blue coins count.
            </summary>
            <value>The blue coins.</value>
        </member>
        <member name="P:BotBits.Events.BlueCoinEvent.X">
            <summary>
                Gets the x coordinate.
            </summary>
            <value>The x coordinate.</value>
        </member>
        <member name="P:BotBits.Events.BlueCoinEvent.Y">
            <summary>
                Gets the y coordinate.
            </summary>
            <value>The y coordinate.</value>
        </member>
        <member name="T:BotBits.Events.GoldCoinEvent">
            <summary>
                Occurs when a player's gold coin count changes.
            </summary>
            <seealso cref="T:BotBits.Event`1" />
        </member>
        <member name="P:BotBits.Events.GoldCoinEvent.Player">
            <summary>
                Gets the player.
            </summary>
            <value>The player.</value>
        </member>
        <member name="P:BotBits.Events.GoldCoinEvent.GoldCoins">
            <summary>
                Gets the gold coins count.
            </summary>
            <value>The gold coins.</value>
        </member>
        <member name="P:BotBits.Events.GoldCoinEvent.X">
            <summary>
                Gets the x coordinate.
            </summary>
            <value>The x.</value>
        </member>
        <member name="P:BotBits.Events.GoldCoinEvent.Y">
            <summary>
                Gets the y coordinate.
            </summary>
            <value>The y coordinate.</value>
        </member>
        <member name="T:BotBits.Events.EditRightChangedEvent">
            <summary>
                Occurs when player's edit rights change.
            </summary>
            <seealso cref="T:BotBits.Event`1" />
        </member>
        <member name="P:BotBits.Events.EditRightChangedEvent.CanEdit">
            <summary>
                Gets a value indicating whether the player can edit.
            </summary>
            <value><c>true</c> if this instance can edit; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:BotBits.Events.OrangeSwitchEvent">
            <summary>
                Occurs when a orange switch state changes.
            </summary>
            <seealso cref="T:BotBits.Event`1" />
        </member>
        <member name="P:BotBits.Events.OrangeSwitchEvent.SwitchId">
            <summary>
                Gets the switch identifier.
            </summary>
            <value>The switch identifier.</value>
        </member>
        <member name="P:BotBits.Events.OrangeSwitchEvent.Enabled">
            <summary>
                Gets a value indicating whether switch with the <see cref="P:BotBits.Events.OrangeSwitchEvent.SwitchId" /> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:BotBits.Events.AddedToCrewEvent">
            <summary>
                Occurs when world was successfully added to crew.
            </summary>
            <seealso cref="T:BotBits.Events.ReceiveEvent`1" />
        </member>
        <member name="M:BotBits.Events.AddedToCrewEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.AddedToCrewEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="P:BotBits.Events.AddedToCrewEvent.CrewName">
            <summary>
                Gets or sets the name of the crew.
            </summary>
            <value>The name of the crew.</value>
        </member>
        <member name="P:BotBits.Events.AddedToCrewEvent.CrewId">
            <summary>
                Gets or sets the crew identifier.
            </summary>
            <value>The crew identifier.</value>
        </member>
        <member name="T:BotBits.Events.AllowSpectatingEvent">
            <summary>
                Occurs when spectating in the world setting is changed.
            </summary>
            <seealso cref="T:BotBits.Events.ReceiveEvent`1" />
        </member>
        <member name="P:BotBits.Events.AllowSpectatingEvent.Allow">
            <summary>
                Gets or sets a value indicating whether spectating is allowed.
            </summary>
            <value><c>true</c> if spectating is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:BotBits.Events.AllowToggleGodEvent">
            <summary>
                Occurs when a player received or lost ability to toggle god mode.
            </summary>
            <seealso cref="T:BotBits.Events.PlayerEvent`1" />
        </member>
        <member name="M:BotBits.Events.AllowToggleGodEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.AllowToggleGodEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="P:BotBits.Events.AllowToggleGodEvent.AllowToggle">
            <summary>
                Gets or sets a value indicating whether player can toggle god mode.
            </summary>
            <value><c>true</c> if player can toggle god mode; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:BotBits.Events.AuraEvent">
            <summary>
                Occurs when a player changes aura shape or color.
            </summary>
            <seealso cref="T:BotBits.Events.PlayerEvent`1" />
        </member>
        <member name="P:BotBits.Events.AuraEvent.AuraShape">
            <summary>
                Gets or sets the aura shape.
            </summary>
            <value>The aura shape.</value>
        </member>
        <member name="P:BotBits.Events.AuraEvent.AuraColor">
            <summary>
                Gets or sets the color of the aura.
            </summary>
            <value>The color of the aura.</value>
        </member>
        <member name="T:BotBits.Events.BannedEvent">
            <summary>
                Occurs when trying to join a world with a banned account.
            </summary>
            <seealso cref="T:BotBits.Events.ReceiveEvent`1" />
        </member>
        <member name="M:BotBits.Events.BannedEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.BannedEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="T:BotBits.Events.CampaignRewardsEvent">
            <summary>
                Occurs when receiving rewards for completing campaign world.
            </summary>
            <seealso cref="T:BotBits.Events.PlayerEvent`1" />
        </member>
        <member name="M:BotBits.Events.CampaignRewardsEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.CampaignRewardsEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="P:BotBits.Events.CampaignRewardsEvent.Rewards">
            <summary>
                Gets or sets the rewards.
            </summary>
            <value>The rewards.</value>
        </member>
        <member name="P:BotBits.Events.CampaignRewardsEvent.NextWorldImageUrl">
            <summary>
                Gets or sets the image URL of next world in campaign.
            </summary>
            <value>The image URL of next world in campaign.</value>
        </member>
        <member name="P:BotBits.Events.CampaignRewardsEvent.BadgeImageUrl">
            <summary>
                Gets or sets the badge image URL.
            </summary>
            <value>The badge image URL.</value>
        </member>
        <member name="P:BotBits.Events.CampaignRewardsEvent.BadgeDescription">
            <summary>
                Gets or sets the badge description.
            </summary>
            <value>The badge description.</value>
        </member>
        <member name="P:BotBits.Events.CampaignRewardsEvent.BadgeTitle">
            <summary>
                Gets or sets the badge title.
            </summary>
            <value>The badge title.</value>
        </member>
        <member name="P:BotBits.Events.CampaignRewardsEvent.ShowBadge">
            <summary>
                Gets or sets a value indicating whether received badge.
            </summary>
            <value><c>true</c> if received badge; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:BotBits.Events.CompletedLevelEvent">
            <summary>
                Occurs when completing a world by touching win trophy.
                NOTE: If player received campaign rewards,
                <see cref="T:BotBits.Events.CampaignRewardsEvent" /> is received instead of this event.
            </summary>
            <seealso cref="T:BotBits.Events.ReceiveEvent`1" />
        </member>
        <member name="M:BotBits.Events.CompletedLevelEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.CompletedLevelEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="T:BotBits.Events.CrewAddRequestEvent">
            <summary>
                Occurs when a player requests to add world to crew.
            </summary>
            <seealso cref="T:BotBits.Events.ReceiveEvent`1" />
        </member>
        <member name="M:BotBits.Events.CrewAddRequestEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.CrewAddRequestEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="P:BotBits.Events.CrewAddRequestEvent.CrewName">
            <summary>
                Gets or sets the name of the crew to which they want to add the world.
            </summary>
            <value>The name of the crew.</value>
        </member>
        <member name="P:BotBits.Events.CrewAddRequestEvent.Requester">
            <summary>
                Gets or sets the username of the requester.
            </summary>
            <value>The requester.</value>
        </member>
        <member name="T:BotBits.Events.CrewAddRequestFailedEvent">
            <summary>
                Occurs when an attempt to request adding world to crew didn't succeed.
            </summary>
            <seealso cref="T:BotBits.Events.ReceiveEvent`1" />
        </member>
        <member name="M:BotBits.Events.CrewAddRequestFailedEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.CrewAddRequestFailedEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="P:BotBits.Events.CrewAddRequestFailedEvent.Reason">
            <summary>
                Gets or sets the reason of the failure.
            </summary>
            <value>The reason.</value>
        </member>
        <member name="T:BotBits.Events.EditRightsEvent">
            <summary>
                Occurs when a player receives or loses edit rights.
                NOTE: You receive this even only if you are owner of the world.
            </summary>
            <seealso cref="T:BotBits.Events.PlayerEvent`1" />
        </member>
        <member name="M:BotBits.Events.EditRightsEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.EditRightsEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="P:BotBits.Events.EditRightsEvent.AllowEdit">
            <summary>
                Gets or sets a value indicating whether player is now allowed to edit.
            </summary>
            <value><c>true</c> if player is now allowed to edit; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:BotBits.Events.EffectEvent">
            <summary>
                Occurs when a player gains or looses an effect.
            </summary>
            <seealso cref="T:BotBits.Events.PlayerEvent`1" />
        </member>
        <member name="P:BotBits.Events.EffectEvent.Duration">
            <summary>
                Gets or sets the duration.
            </summary>
            <value>The duration.</value>
        </member>
        <member name="P:BotBits.Events.EffectEvent.TimeLeft">
            <summary>
                Gets or sets the time left before the effect expires.
            </summary>
            <value>The time left before the effect expires..</value>
        </member>
        <member name="P:BotBits.Events.EffectEvent.Expires">
            <summary>
                Gets a value indicating whether effect can expire
            </summary>
            <value><c>true</c> if effect can expire; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BotBits.Events.EffectEvent.Enabled">
            <summary>
                Gets or sets a value indicating whether effect is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BotBits.Events.EffectEvent.Effect">
            <summary>
                Gets or sets the effect.
            </summary>
            <value>The effect.</value>
        </member>
        <member name="T:BotBits.Events.EffectLimitsEvent">
            <summary>
                Occurs when effect limits are changed.
            </summary>
            <seealso cref="T:BotBits.Events.ReceiveEvent`1" />
        </member>
        <member name="M:BotBits.Events.EffectLimitsEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.EffectLimitsEvent" /> class.
            </summary>
            <param name="client">The EE message.</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:BotBits.Events.EffectLimitsEvent.ZombieLimit">
            <summary>
                Gets or sets the zombie limit.
            </summary>
            <value>The zombie limit.</value>
        </member>
        <member name="P:BotBits.Events.EffectLimitsEvent.CurseLimit">
            <summary>
                Gets or sets the curse limit.
            </summary>
            <value>The curse limit.</value>
        </member>
        <member name="T:BotBits.Events.FavoritedEvent">
            <summary>
                Occurs when you successfully favorited the world.
            </summary>
            <seealso cref="T:BotBits.Events.ReceiveEvent`1" />
        </member>
        <member name="M:BotBits.Events.FavoritedEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.FavoritedEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="T:BotBits.Events.GiveMagicSmileyEvent">
            <summary>
                Occurs when you are given magic smiley.
            </summary>
            <seealso cref="T:BotBits.Events.ReceiveEvent`1" />
        </member>
        <member name="M:BotBits.Events.GiveMagicSmileyEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.GiveMagicSmileyEvent" /> class.
            </summary>
            <param name="client">The EE message.</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:BotBits.Events.GiveMagicSmileyEvent.MagicSmiley">
            <summary>
                Gets or sets the magic smiley identifier.
            </summary>
            <value>The magic smiley.</value>
        </member>
        <member name="T:BotBits.Events.HideLobbyEvent">
            <summary>
                Occurs when world hidden in lobby setting is changed.
            </summary>
            <seealso cref="T:BotBits.Events.ReceiveEvent`1" />
        </member>
        <member name="P:BotBits.Events.HideLobbyEvent.Hidden">
            <summary>
                Gets or sets a value indicating whether world is hidden.
            </summary>
            <value><c>true</c> if world is hidden; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:BotBits.Events.Info2Event">
            <summary>
                Occurs when the server sends information pertaining to low-level functions like (a) you were kicked or (b) the room
                is full or (c) rate limit exceeded.
            </summary>
            <seealso cref="T:BotBits.Events.ReceiveEvent`1" />
        </member>
        <member name="M:BotBits.Events.Info2Event.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.InfoEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="P:BotBits.Events.Info2Event.Text">
            <summary>
                Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:BotBits.Events.Info2Event.Title">
            <summary>
                Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="T:BotBits.Events.JoinCampaignEvent">
            <summary>
                Occurs when player joins campaign world.
                Contains information about campaign data of the world.
            </summary>
            <seealso cref="T:BotBits.Events.ReceiveEvent`1" />
        </member>
        <member name="M:BotBits.Events.JoinCampaignEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.JoinCampaignEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="P:BotBits.Events.JoinCampaignEvent.MaxTiers">
            <summary>
                Gets or sets the number of tiers in the campaign.
            </summary>
            <value>The maximum tiers.</value>
        </member>
        <member name="P:BotBits.Events.JoinCampaignEvent.Tier">
            <summary>
                Gets or sets the tier of the world.
            </summary>
            <value>The tier.</value>
        </member>
        <member name="P:BotBits.Events.JoinCampaignEvent.Difficulty">
            <summary>
                Gets or sets the difficulty of the world.
            </summary>
            <value>The difficulty.</value>
        </member>
        <member name="P:BotBits.Events.JoinCampaignEvent.Status">
            <summary>
                Gets or sets the campaign status of the world.
            </summary>
            <value>The status.</value>
        </member>
        <member name="P:BotBits.Events.JoinCampaignEvent.Campaign">
            <summary>
                Gets or sets the campaign name.
            </summary>
            <value>The campaign name.</value>
        </member>
        <member name="T:BotBits.Events.LikedEvent">
            <summary>
                Occurs when you successfully liked the world.
            </summary>
            <seealso cref="T:BotBits.Events.ReceiveEvent`1" />
        </member>
        <member name="M:BotBits.Events.LikedEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.LikedEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="T:BotBits.Events.MagicEvent">
            <summary>
                Occurs when you are given magic reward.
            </summary>
            <seealso cref="T:BotBits.Events.ReceiveEvent`1" />
        </member>
        <member name="M:BotBits.Events.MagicEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.MagicEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="T:BotBits.Events.PurpleSwitchInitEvent">
            <summary>
                Occurs after join. Contains information about initial switch states.
            </summary>
            <seealso cref="T:BotBits.Events.PlayerEvent`1" />
        </member>
        <member name="M:BotBits.Events.PurpleSwitchInitEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.PurpleSwitchInitEvent" /> class.
            </summary>
            <param name="client">The client.</param>
            <param name="message">The EE message.</param>
        </member>
        <member name="P:BotBits.Events.PurpleSwitchInitEvent.PurpleSwitches">
            <summary>
                Gets or sets the purple switch states.
            </summary>
            <value>The purple switch states.</value>
        </member>
        <member name="T:BotBits.Events.SwitchUpdateEvent">
            <summary>
                Occurs when someone touches purple switch.
            </summary>
            <seealso cref="T:BotBits.Events.PlayerEvent`1" />
        </member>
        <member name="M:BotBits.Events.SwitchUpdateEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.SwitchUpdateEvent" /> class.
            </summary>
            <param name="client"></param>
            <param name="message">The EE message.</param>
            D
        </member>
        <member name="P:BotBits.Events.SwitchUpdateEvent.SwitchType">
            <summary>
                Gets or sets the type.
            </summary>
            <value>
                The type.
            </value>
        </member>
        <member name="P:BotBits.Events.SwitchUpdateEvent.Enabled">
            <summary>
                Gets or sets the value indicating whether the touched switch is activated.
            </summary>
            <value>The enabled.</value>
        </member>
        <member name="P:BotBits.Events.SwitchUpdateEvent.Id">
            <summary>
                Gets or sets the switch identifier.
            </summary>
            <value>The switch identifier.</value>
        </member>
        <member name="T:BotBits.Events.RoomDescriptionEvent">
            <summary>
                Occurs when world description is changed.
            </summary>
            <seealso cref="T:BotBits.Events.ReceiveEvent`1" />
        </member>
        <member name="P:BotBits.Events.RoomDescriptionEvent.Description">
            <summary>
                Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="T:BotBits.Events.TeamEvent">
            <summary>
                Occurs when someone changes their team.
            </summary>
            <seealso cref="T:BotBits.Events.PlayerEvent`1" />
        </member>
        <member name="P:BotBits.Events.TeamEvent.Team">
            <summary>
                Gets or sets the team.
            </summary>
            <value>The team.</value>
        </member>
        <member name="T:BotBits.Events.TimeEvent">
            <summary>
                Occurs as a response to the "time" message.
            </summary>
            <seealso cref="T:BotBits.Events.ReceiveEvent`1" />
        </member>
        <member name="M:BotBits.Events.TimeEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.TimeEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="T:BotBits.Events.UnfavoritedEvent">
            <summary>
                Occurs when you successfully un-favorite from the world.
            </summary>
            <seealso cref="T:BotBits.Events.ReceiveEvent`1" />
        </member>
        <member name="M:BotBits.Events.UnfavoritedEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.UnfavoritedEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="T:BotBits.Events.UnlikedEvent">
            <summary>
                Occurs when you successfully un-like the world.
            </summary>
            <seealso cref="T:BotBits.Events.ReceiveEvent`1" />
        </member>
        <member name="M:BotBits.Events.UnlikedEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.UnlikedEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="T:BotBits.Events.WorldReleasedEvent">
            <summary>
                Occurs when crew world is getting released.
            </summary>
            <seealso cref="T:BotBits.Events.ReceiveEvent`1" />
        </member>
        <member name="M:BotBits.Events.WorldReleasedEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.WorldReleasedEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="T:BotBits.Events.PurpleSwitchEvent">
            <summary>
                Occurs when a player's purple switch state changes.
            </summary>
            <seealso cref="T:BotBits.Event`1" />
        </member>
        <member name="P:BotBits.Events.PurpleSwitchEvent.Player">
            <summary>
                Gets the player.
            </summary>
            <value>The player.</value>
        </member>
        <member name="P:BotBits.Events.PurpleSwitchEvent.SwitchId">
            <summary>
                Gets the switch identifier.
            </summary>
            <value>The switch identifier.</value>
        </member>
        <member name="P:BotBits.Events.PurpleSwitchEvent.Enabled">
            <summary>
                Gets a value indicating whether switch with the <see cref="P:BotBits.Events.PurpleSwitchEvent.SwitchId" /> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:BotBits.Events.PrivateMessageEvent">
            <summary>
                Occurs when a player sends a private message.
            </summary>
            <seealso cref="T:BotBits.Event`1" />
        </member>
        <member name="P:BotBits.Events.PrivateMessageEvent.Username">
            <summary>
                Gets the username of the player which sent the private message.
            </summary>
            <value>The username.</value>
        </member>
        <member name="P:BotBits.Events.PrivateMessageEvent.Message">
            <summary>
                Gets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="T:BotBits.Events.PlayerIOMessageEvent">
            <summary>
                Occurs when new <see cref="T:PlayerIOClient.Message" /> is received.
            </summary>
            <seealso cref="T:BotBits.Event`1" />
        </member>
        <member name="P:BotBits.Events.PlayerIOMessageEvent.Message">
            <summary>
                Gets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="T:BotBits.Events.RoomVisibleEvent">
            <summary>
                Occurs when world accessibility is changed.
            </summary>
            <seealso cref="T:BotBits.Events.ReceiveEvent`1" />
        </member>
        <member name="P:BotBits.Events.RoomVisibleEvent.Visible">
            <summary>
                Gets or sets a value indicating whether world is accessible.
            </summary>
            <value><c>true</c> if world is accessible; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:BotBits.Events.SignPlaceEvent">
            <summary>
                Occurs when a sign block is placed in the world.
            </summary>
            <seealso cref="T:BotBits.Events.PlayerEvent`1" />
        </member>
        <member name="M:BotBits.Events.SignPlaceEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.SignPlaceEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="P:BotBits.Events.SignPlaceEvent.SignColor">
            <summary>
                Gets or sets the color of the sign.
            </summary>
            <value>
                The color of the sign.
            </value>
        </member>
        <member name="P:BotBits.Events.SignPlaceEvent.Text">
            <summary>
                Gets or sets the text.
            </summary>
            <value>
                The text.
            </value>
        </member>
        <member name="P:BotBits.Events.SignPlaceEvent.Id">
            <summary>
                Gets or sets the block id.
            </summary>
            <value>
                The block id.
            </value>
        </member>
        <member name="P:BotBits.Events.SignPlaceEvent.X">
            <summary>
                Gets or sets the position x.
            </summary>
            <value>The position x.</value>
        </member>
        <member name="P:BotBits.Events.SignPlaceEvent.Y">
            <summary>
                Gets or sets the position y.
            </summary>
            <value>The position y.</value>
        </member>
        <member name="T:BotBits.Events.PlayerEvent`1">
            <summary>
                Base for the player events. Used when message is about specific player.
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:BotBits.Events.ReceiveEvent`1" />
            <seealso cref="T:BotBits.Events.ICancellable" />
        </member>
        <member name="T:BotBits.Events.FlyEvent">
            <summary>
                Occurs when a player's flying status changes.
            </summary>
            <seealso cref="T:BotBits.Event`1" />
        </member>
        <member name="P:BotBits.Events.FlyEvent.Player">
            <summary>
                Gets the player.
            </summary>
            <value>The player.</value>
        </member>
        <member name="P:BotBits.Events.FlyEvent.Flying">
            <summary>
                Gets a value indicating whether the player is flying.
            </summary>
            <value><c>true</c> if flying; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:BotBits.Events.SendingEvent`1">
            <summary>
                Raised when a queued SendMessage is about to be sent.
            </summary>
            <remarks>This event is not delegated to the scheduler for performance optimizations.</remarks>
        </member>
        <member name="T:BotBits.Events.WorldResizeEvent">
            <summary>
                Occurs when the world size changes.
            </summary>
            <seealso cref="T:BotBits.Event`1" />
        </member>
        <member name="P:BotBits.Events.WorldResizeEvent.NewHeight">
            <summary>
                Gets the new height.
            </summary>
            <value>
                The new height.
            </value>
        </member>
        <member name="P:BotBits.Events.WorldResizeEvent.NewWidth">
            <summary>
                Gets the new width.
            </summary>
            <value>
                The new width.
            </value>
        </member>
        <member name="T:BotBits.Events.RespawnEvent">
            <summary>
                Occurs when a player is teleported. This event gets raised for
                respawns of any kind, including death.
            </summary>
            <seealso cref="T:BotBits.Event`1" />
        </member>
        <member name="P:BotBits.Events.RespawnEvent.Player">
            <summary>
                Gets the player.
            </summary>
            <value>The player.</value>
        </member>
        <member name="P:BotBits.Events.RespawnEvent.X">
            <summary>
                gets the x coordinate.
            </summary>
            <value>The x coordinate.</value>
        </member>
        <member name="P:BotBits.Events.RespawnEvent.Y">
            <summary>
                Gets the y coordinate.
            </summary>
            <value>The y coordinate.</value>
        </member>
        <member name="P:BotBits.Events.RespawnEvent.Deaths">
            <summary>
                Gets or sets the deaths amount.
            </summary>
            <value>The deaths.</value>
        </member>
        <member name="P:BotBits.Events.RespawnEvent.ResetCoins">
            <summary>
                Gets a value indicating whether player's stats should be reset.
            </summary>
            <value><c>true</c> if player's stats should be reset; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BotBits.Events.RespawnEvent.CausedByDeath">
            <summary>
                Gets or sets a value indicating whether this event was caused by death.
            </summary>
            <value><c>true</c> if this event was caused by death; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BotBits.Events.RespawnEvent.BlockX">
            <summary>
                Gets the block x.
            </summary>
            <value>The block x.</value>
        </member>
        <member name="P:BotBits.Events.RespawnEvent.BlockY">
            <summary>
                Gets the block y.
            </summary>
            <value>The block y.</value>
        </member>
        <member name="T:BotBits.Events.AccessRightChangedEvent">
            <summary>
                Occurs when player's access rights change.
            </summary>
            <seealso cref="T:BotBits.Event`1" />
        </member>
        <member name="P:BotBits.Events.AccessRightChangedEvent.NewRights">
            <summary>
                Gets the new rights.
            </summary>
            <value>The new rights.</value>
        </member>
        <member name="T:BotBits.Events.MetaChangedEvent">
            <summary>
                Occurs when world metadata changes.
            </summary>
            <seealso cref="T:BotBits.Event`1" />
        </member>
        <member name="P:BotBits.Events.MetaChangedEvent.Favorites">
            <summary>
                Gets the amount of favorites.
            </summary>
            <value>The amount of favorites.</value>
        </member>
        <member name="P:BotBits.Events.MetaChangedEvent.OwnerUsername">
            <summary>
                Gets the owner's username.
            </summary>
            <value>The owner's username.</value>
        </member>
        <member name="P:BotBits.Events.MetaChangedEvent.Plays">
            <summary>
                Gets the amount of plays.
            </summary>
            <value>The amount of plays.</value>
        </member>
        <member name="P:BotBits.Events.MetaChangedEvent.Likes">
            <summary>
                Gets the amount of likes.
            </summary>
            <value>The amount of likes.</value>
        </member>
        <member name="P:BotBits.Events.MetaChangedEvent.WorldName">
            <summary>
                Gets the name of the world.
            </summary>
            <value>The name of the world.</value>
        </member>
        <member name="T:BotBits.Events.ConnectEvent">
            <summary>
                Occurs when connection with the Everybody Edits server is established.
            </summary>
            <seealso cref="T:BotBits.Event`1" />
        </member>
        <member name="T:BotBits.Events.DisconnectEvent">
            <summary>
                Occurs when connection with the Everybody Edits server is lost.
            </summary>
            <seealso cref="T:BotBits.Event`1" />
        </member>
        <member name="P:BotBits.Events.DisconnectEvent.Message">
            <summary>
                Gets or sets the disconnect message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="T:BotBits.Events.InvalidMessageEvent">
            <summary>
                Occurs when a received PlayerIOMessage could not be handled by BotBits.
            </summary>
            <seealso cref="T:BotBits.Events.ReceiveEvent`1" />
        </member>
        <member name="P:BotBits.Events.InvalidMessageEvent.Reason">
            <summary>
                Gets the reason of the error.
            </summary>
            <value>The reason.</value>
        </member>
        <member name="T:BotBits.Events.AccessEvent">
            <summary>
                Occurs when you are given edit rights in the world.
            </summary>
            <seealso cref="T:BotBits.Events.ReceiveEvent`1" />
        </member>
        <member name="M:BotBits.Events.AccessEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.AccessEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="T:BotBits.Events.JoinEvent">
            <summary>
                Occurs when someone joins world.
            </summary>
            <seealso cref="T:BotBits.Events.PlayerEvent`1" />
        </member>
        <member name="M:BotBits.Events.JoinEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.JoinEvent" /> class.
            </summary>
            <param name="message">The EE message.</param>
            <param name="client"></param>
        </member>
        <member name="P:BotBits.Events.JoinEvent.Deaths">
            <summary>
                Gets or sets the amount of deaths.
            </summary>
            <value>The deaths.</value>
        </member>
        <member name="P:BotBits.Events.JoinEvent.CrewMember">
            <summary>
                Gets or sets a value indicating whether player is crew member.
            </summary>
            <value><c>true</c> if player is crew member; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BotBits.Events.JoinEvent.Badge">
            <summary>
                Gets or sets the badge.
            </summary>
            <value>The badge.</value>
        </member>
        <member name="P:BotBits.Events.JoinEvent.ConnectUserId">
            <summary>
                Gets or sets the connect user identifier.
            </summary>
            <value>The connect user identifier.</value>
        </member>
        <member name="P:BotBits.Events.JoinEvent.AuraShape">
            <summary>
                Gets or sets the aura.
            </summary>
            <value>
                The aura.
            </value>
        </member>
        <member name="P:BotBits.Events.JoinEvent.Team">
            <summary>
                Gets or sets the team.
            </summary>
            <value>
                The team.
            </value>
        </member>
        <member name="P:BotBits.Events.JoinEvent.ChatColor">
            <summary>
                Gets or sets the color of the chat.
            </summary>
            <value>
                The color of the chat.
            </value>
        </member>
        <member name="P:BotBits.Events.JoinEvent.Admin">
            <summary>
                Gets or sets whether the user is in admin mode or not.
            </summary>
            <value><c>true</c> if the player has activated admin mode; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BotBits.Events.JoinEvent.Coins">
            <summary>
                Gets or sets the amount of yellow coins the player has.
            </summary>
            <value>The yellow coins.</value>
        </member>
        <member name="P:BotBits.Events.JoinEvent.BlueCoins">
            <summary>
                Gets or sets the amount of blue coins the player has.
            </summary>
            <value>The blue coins.</value>
        </member>
        <member name="P:BotBits.Events.JoinEvent.Smiley">
            <summary>
                Gets or sets the smiley the player has.
            </summary>
            <value>The face.</value>
        </member>
        <member name="P:BotBits.Events.JoinEvent.HasChat">
            <summary>
                Gets or sets whether this player may chat using the free-form chat box.
            </summary>
            <value><c>true</c> if this player has chat; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BotBits.Events.JoinEvent.ClubMember">
            <summary>
                Gets or sets whether this player is a club member.
            </summary>
            <value><c>true</c> if this player is a club member; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BotBits.Events.JoinEvent.God">
            <summary>
                Gets or sets whether this player has activated god mode.
            </summary>
            <value><c>true</c> if this player is in god mode; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BotBits.Events.JoinEvent.Mod">
            <summary>
                Gets or sets whether this player is a moderator.
            </summary>
            <value><c>true</c> if this player is a moderator; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BotBits.Events.JoinEvent.Friend">
            <summary>
                Gets or sets whether this player is my friend or not.
            </summary>
            <value><c>true</c> if this player is my friend; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BotBits.Events.JoinEvent.PurpleSwitch">
            <summary>
                Gets or sets whether the player has toggled a purple switch.
            </summary>
            <value><c>true</c> if the player has toggled a purple switch; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BotBits.Events.JoinEvent.Username">
            <summary>
                Gets or sets the username of the player.
            </summary>
            <value>The username.</value>
        </member>
        <member name="P:BotBits.Events.JoinEvent.X">
            <summary>
                Gets or sets the x coordinate of the player.
            </summary>
            <value>The user position x.</value>
        </member>
        <member name="P:BotBits.Events.JoinEvent.Y">
            <summary>
                Gets or sets the y coordinate of the player.
            </summary>
            <value>The user position y.</value>
        </member>
        <member name="P:BotBits.Events.JoinEvent.BlockX">
            <summary>
                Gets the block x.
            </summary>
            <value>The block x.</value>
        </member>
        <member name="P:BotBits.Events.JoinEvent.BlockY">
            <summary>
                Gets the block y.
            </summary>
            <value>The block y.</value>
        </member>
        <member name="T:BotBits.Events.AutoTextEvent">
            <summary>
                Occurs when a player uses auto-text.
            </summary>
            <seealso cref="T:BotBits.Events.PlayerEvent`1" />
        </member>
        <member name="M:BotBits.Events.AutoTextEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.AutoTextEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="P:BotBits.Events.AutoTextEvent.AutoText">
            <summary>
                Gets or sets the automatic text value.
            </summary>
            <value>The automatic text.</value>
        </member>
        <member name="T:BotBits.Events.BackgroundColorEvent">
            <summary>
                Occurs when background color of the world is changed.
            </summary>
            <seealso cref="T:BotBits.Events.ReceiveEvent`1" />
        </member>
        <member name="P:BotBits.Events.BackgroundColorEvent.BackgroundColor">
            <summary>
                Gets or sets the color of the background.
            </summary>
            <value>The color of the background.</value>
        </member>
        <member name="T:BotBits.Events.BlockPlaceEvent">
            <summary>
                Occurs when a block is placed in the world.
            </summary>
            <seealso cref="T:BotBits.Events.PlayerEvent`1" />
        </member>
        <member name="M:BotBits.Events.BlockPlaceEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.BlockPlaceEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="P:BotBits.Events.BlockPlaceEvent.Layer">
            <summary>
                Gets or sets the layer.
            </summary>
            <value>The layer.</value>
        </member>
        <member name="P:BotBits.Events.BlockPlaceEvent.X">
            <summary>
                Gets or sets the position x of the player.
            </summary>
            <value>The position x.</value>
        </member>
        <member name="P:BotBits.Events.BlockPlaceEvent.Y">
            <summary>
                Gets or sets the position y of the player.
            </summary>
            <value>The position y.</value>
        </member>
        <member name="P:BotBits.Events.BlockPlaceEvent.Id">
            <summary>
                Gets or sets the block id.
            </summary>
            <value>
                The block id.
            </value>
        </member>
        <member name="T:BotBits.Events.ClearEvent">
            <summary>
                Occurs when a world is cleared.
            </summary>
            <seealso cref="T:BotBits.Events.ReceiveEvent`1" />
        </member>
        <member name="M:BotBits.Events.ClearEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.ClearEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="P:BotBits.Events.ClearEvent.FillBlock">
            <summary>
                Gets or sets the fill block.
            </summary>
            <value>The fill block.</value>
        </member>
        <member name="P:BotBits.Events.ClearEvent.BorderBlock">
            <summary>
                Gets or sets the border block.
            </summary>
            <value>The border block.</value>
        </member>
        <member name="P:BotBits.Events.ClearEvent.RoomHeight">
            <summary>
                Gets or sets the height of the room.
            </summary>
            <value>The height of the room.</value>
        </member>
        <member name="P:BotBits.Events.ClearEvent.RoomWidth">
            <summary>
                Gets or sets the width of the room.
            </summary>
            <value>The width of the room.</value>
        </member>
        <member name="T:BotBits.Events.CoinDoorPlaceEvent">
            <summary>
                Occurs when a coin door is placed in the world.
            </summary>
            <seealso cref="T:BotBits.Events.PlayerEvent`1" />
        </member>
        <member name="M:BotBits.Events.CoinDoorPlaceEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.CoinDoorPlaceEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="P:BotBits.Events.CoinDoorPlaceEvent.CoinsToOpen">
            <summary>
                Gets or sets the amount of coins that is needed to open the coin door.
            </summary>
            <value>The coins to open.</value>
        </member>
        <member name="P:BotBits.Events.CoinDoorPlaceEvent.Id">
            <summary>
                Gets or sets the block id.
            </summary>
            <value>
                The block id.
            </value>
        </member>
        <member name="P:BotBits.Events.CoinDoorPlaceEvent.X">
            <summary>
                Gets or sets the position x of the player.
            </summary>
            <value>The position x.</value>
        </member>
        <member name="P:BotBits.Events.CoinDoorPlaceEvent.Y">
            <summary>
                Gets or sets the position y of the player.
            </summary>
            <value>The position y.</value>
        </member>
        <member name="T:BotBits.Events.CoinEvent">
            <summary>
                Occurs when a player's gold or blue coin count changes.
            </summary>
            <seealso cref="T:BotBits.Events.PlayerEvent`1" />
        </member>
        <member name="M:BotBits.Events.CoinEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.CoinEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="P:BotBits.Events.CoinEvent.Y">
            <summary>
                Gets or sets the y coordinate of the collected coin.
            </summary>
            <value>The y coordinate.</value>
        </member>
        <member name="P:BotBits.Events.CoinEvent.X">
            <summary>
                Gets or sets the x coordinate of the collected coin.
            </summary>
            <value>The x coordinate.</value>
        </member>
        <member name="P:BotBits.Events.CoinEvent.GoldCoins">
            <summary>
                Gets or sets the coins of the player.
            </summary>
            <value>The coins.</value>
        </member>
        <member name="P:BotBits.Events.CoinEvent.BlueCoins">
            <summary>
                Gets or sets the blue coins of the player.
            </summary>
            <value>The blue coins.</value>
        </member>
        <member name="T:BotBits.Events.CrownEvent">
            <summary>
                Occurs when a player collects gold crown.
            </summary>
            <seealso cref="T:BotBits.Events.PlayerEvent`1" />
        </member>
        <member name="M:BotBits.Events.CrownEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.CrownEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="T:BotBits.Events.BadgeEvent">
            <summary>
                Occurs when a player changes badge.
            </summary>
            <seealso cref="T:BotBits.Events.PlayerEvent`1" />
        </member>
        <member name="M:BotBits.Events.BadgeEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.BadgeEvent" /> class.
            </summary>
            <param name="message">The EE message.</param>
            <param name="client"></param>
        </member>
        <member name="P:BotBits.Events.BadgeEvent.Badge">
            <summary>
                Gets or sets the badge.
            </summary>
            <value>The badge.</value>
        </member>
        <member name="T:BotBits.Events.GiveMagicBrickPackageEvent">
            <summary>
                Occurs when you are given magic brick package.
            </summary>
            <seealso cref="T:BotBits.Events.ReceiveEvent`1" />
        </member>
        <member name="M:BotBits.Events.GiveMagicBrickPackageEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.GiveMagicBrickPackageEvent" /> class.
            </summary>
            <param name="message">The EE message.</param>
            <param name="client"></param>
        </member>
        <member name="P:BotBits.Events.GiveMagicBrickPackageEvent.MagicPack">
            <summary>
                Gets or sets the magic pack identifier.
            </summary>
            <value>The magic pack.</value>
        </member>
        <member name="T:BotBits.Events.GodModeEvent">
            <summary>
                Occurs when a player toggles god mode.
            </summary>
            <seealso cref="T:BotBits.Events.PlayerEvent`1" />
        </member>
        <member name="M:BotBits.Events.GodModeEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.GodModeEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="P:BotBits.Events.GodModeEvent.God">
            <summary>
                Gets or sets a value indicating whether this player is in god mode.
            </summary>
            <value><c>true</c> if this player is in god mode; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:BotBits.Events.AdminModeEvent">
            <summary>
                Occurs when an administrator toggles administrator mode.
            </summary>
            <seealso cref="T:BotBits.Events.PlayerEvent`1" />
        </member>
        <member name="M:BotBits.Events.AdminModeEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.AdminModeEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="P:BotBits.Events.AdminModeEvent.Admin">
            <summary>
                Gets or sets a value indicating whether this player is in administrator mode.
            </summary>
            <value><c>true</c> if this player is in administrator mode; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:BotBits.Events.HideKeyEvent">
            <summary>
                Occurs when a player touches a key or timed doors change their state.
            </summary>
            <seealso cref="T:BotBits.Events.PlayerEvent`1" />
        </member>
        <member name="M:BotBits.Events.HideKeyEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.HideKeyEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="P:BotBits.Events.HideKeyEvent.Key">
            <summary>
                Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="T:BotBits.Events.InfoEvent">
            <summary>
                Occurs when the server sends information pertaining to low-level functions like (a) you were kicked or (b) the room
                is full or (c) rate limit exceeded.
            </summary>
            <seealso cref="T:BotBits.Events.ReceiveEvent`1" />
        </member>
        <member name="M:BotBits.Events.InfoEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.InfoEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="P:BotBits.Events.InfoEvent.Text">
            <summary>
                Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:BotBits.Events.InfoEvent.Title">
            <summary>
                Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="T:BotBits.Events.InitEvent">
            <summary>
                Occurs when the player initially joins the room. Contains world information such as title and world content.
            </summary>
            <seealso cref="T:BotBits.Events.ReceiveEvent`1" />
        </member>
        <member name="M:BotBits.Events.InitEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.InitEvent" /> class.
            </summary>
            <param name="message">The EE message.</param>
            <param name="client"></param>
        </member>
        <member name="P:BotBits.Events.InitEvent.Visible">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:BotBits.Events.InitEvent" /> is visible.
            </summary>
            <value>
                <c>true</c> if visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BotBits.Events.InitEvent.BackgroundColor">
            <summary>
                Gets or sets the color of the background.
            </summary>
            <value>
                The color of the background.
            </value>
        </member>
        <member name="P:BotBits.Events.InitEvent.CanEdit">
            <summary>
                Gets or sets a value indicating whether this player is allowed to edit.
            </summary>
            <value><c>true</c> if this instance can edit; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BotBits.Events.InitEvent.GravityMultiplier">
            <summary>
                Gets or sets the gravity of the world.
            </summary>
            <value>The gravity.</value>
        </member>
        <member name="P:BotBits.Events.InitEvent.IsOwner">
            <summary>
                Gets or sets a value indicating whether this player owns the world.
            </summary>
            <value><c>true</c> if this player is the owner; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BotBits.Events.InitEvent.WorldWidth">
            <summary>
                Gets or sets the width of the world.
            </summary>
            <value>The width of the room.</value>
        </member>
        <member name="P:BotBits.Events.InitEvent.WorldHeight">
            <summary>
                Gets or sets the height of the world.
            </summary>
            <value>The height of the room.</value>
        </member>
        <member name="P:BotBits.Events.InitEvent.SpawnX">
            <summary>
                Gets or sets the spawn x coordinate.
            </summary>
            <value>The spawn x.</value>
        </member>
        <member name="P:BotBits.Events.InitEvent.SpawnY">
            <summary>
                Gets or sets the spawn y coordinate.
            </summary>
            <value>The spawn y.</value>
        </member>
        <member name="P:BotBits.Events.InitEvent.Username">
            <summary>
                Gets or sets the username.
            </summary>
            <value>The username.</value>
        </member>
        <member name="P:BotBits.Events.InitEvent.Favorites">
            <summary>
                Gets or sets the current woots of the world.
            </summary>
            <value>The current woots.</value>
        </member>
        <member name="P:BotBits.Events.InitEvent.Owner">
            <summary>
                Gets or sets the owner username of the world.
            </summary>
            <value>The owner username.</value>
        </member>
        <member name="P:BotBits.Events.InitEvent.Plays">
            <summary>
                Gets or sets the plays of the world.
            </summary>
            <value>The plays.</value>
        </member>
        <member name="P:BotBits.Events.InitEvent.Likes">
            <summary>
                Gets or sets the total woots of the world.
            </summary>
            <value>The total woots.</value>
        </member>
        <member name="P:BotBits.Events.InitEvent.WorldName">
            <summary>
                Gets or sets the name of the world.
            </summary>
            <value>The name of the world.</value>
        </member>
        <member name="P:BotBits.Events.InitEvent.SpawnBlockX">
            <summary>
                Gets the block x.
            </summary>
            <value>The block x.</value>
        </member>
        <member name="P:BotBits.Events.InitEvent.SpawnBlockY">
            <summary>
                Gets the block y.
            </summary>
            <value>The block y.</value>
        </member>
        <member name="T:BotBits.Events.KillEvent">
            <summary>
                Occurs when player is killed due to expired effect or /kill, /killall commands.
            </summary>
            <seealso cref="T:BotBits.Events.PlayerEvent`1" />
        </member>
        <member name="M:BotBits.Events.KillEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.KillEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="T:BotBits.Events.LabelPlaceEvent">
            <summary>
                Occurs when someone places label block.
            </summary>
            <seealso cref="T:BotBits.Events.PlayerEvent`1" />
        </member>
        <member name="M:BotBits.Events.LabelPlaceEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.LabelPlaceEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="P:BotBits.Events.LabelPlaceEvent.TextColor">
            <summary>
                Gets or sets the color of the text.
            </summary>
            <value>
                The color of the text.
            </value>
        </member>
        <member name="P:BotBits.Events.LabelPlaceEvent.Text">
            <summary>
                Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:BotBits.Events.LabelPlaceEvent.Id">
            <summary>
                Gets or sets the block id.
            </summary>
            <value>
                The block id.
            </value>
        </member>
        <member name="P:BotBits.Events.LabelPlaceEvent.X">
            <summary>
                Gets or sets the coordinate x.
            </summary>
            <value>The coordinate x.</value>
        </member>
        <member name="P:BotBits.Events.LabelPlaceEvent.Y">
            <summary>
                Gets or sets the coordinate y.
            </summary>
            <value>The coordinate y.</value>
        </member>
        <member name="T:BotBits.Events.LeaveEvent">
            <summary>
                Occurs when someone leaves the world.
            </summary>
            <seealso cref="T:BotBits.Events.PlayerEvent`1" />
        </member>
        <member name="M:BotBits.Events.LeaveEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.LeaveEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="T:BotBits.Events.LoseAccessEvent">
            <summary>
                Occurs when you lose edit rights.
            </summary>
            <seealso cref="T:BotBits.Events.ReceiveEvent`1" />
        </member>
        <member name="M:BotBits.Events.LoseAccessEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.LoseAccessEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="T:BotBits.Events.ModModeEvent">
            <summary>
                Occurs when moderator toggles moderator mode.
            </summary>
            <seealso cref="T:BotBits.Events.PlayerEvent`1" />
        </member>
        <member name="M:BotBits.Events.ModModeEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.ModModeEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="P:BotBits.Events.ModModeEvent.Mod">
            <summary>
                Gets or sets a value indicating whether moderator is in moderator mode.
            </summary>
            <value><c>true</c> if mod; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:BotBits.Events.MoveEvent">
            <summary>
                Occurs when someone moves.
            </summary>
            <seealso cref="T:BotBits.Events.PlayerEvent`1" />
        </member>
        <member name="M:BotBits.Events.MoveEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.MoveEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="P:BotBits.Events.MoveEvent.SpaceJustDown">
            <summary>
                Gets or sets a value indicating whether space was just pressed.
            </summary>
            <value>
                <c>true</c> if space was pressed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BotBits.Events.MoveEvent.SpaceDown">
            <summary>
                Gets or sets a value indicating whether the player is holding down the space bar.
            </summary>
            <value><c>true</c> if the space bar is held down; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BotBits.Events.MoveEvent.Horizontal">
            <summary>
                Gets or sets the horizontal.
            </summary>
            <value>The horizontal.</value>
        </member>
        <member name="P:BotBits.Events.MoveEvent.ModifierX">
            <summary>
                Gets or sets the x modifier.
            </summary>
            <value>The modifier x.</value>
        </member>
        <member name="P:BotBits.Events.MoveEvent.ModifierY">
            <summary>
                Gets or sets the y modifier.
            </summary>
            <value>The modifier y.</value>
        </member>
        <member name="P:BotBits.Events.MoveEvent.SpeedX">
            <summary>
                Gets or sets the speed x.
            </summary>
            <value>The speed x.</value>
        </member>
        <member name="P:BotBits.Events.MoveEvent.SpeedY">
            <summary>
                Gets or sets the speed y.
            </summary>
            <value>The speed y.</value>
        </member>
        <member name="P:BotBits.Events.MoveEvent.Vertical">
            <summary>
                Gets or sets the vertical.
            </summary>
            <value>The vertical.</value>
        </member>
        <member name="P:BotBits.Events.MoveEvent.BlockX">
            <summary>
                Gets the block x.
            </summary>
            <value>The block x.</value>
        </member>
        <member name="P:BotBits.Events.MoveEvent.BlockY">
            <summary>
                Gets the block y.
            </summary>
            <value>The block y.</value>
        </member>
        <member name="P:BotBits.Events.MoveEvent.X">
            <summary>
                Gets or sets the user coordinate x.
            </summary>
            <value>The user position x.</value>
        </member>
        <member name="P:BotBits.Events.MoveEvent.Y">
            <summary>
                Gets or sets the user coordinate y.
            </summary>
            <value>The user position y.</value>
        </member>
        <member name="T:BotBits.Events.PortalPlaceEvent">
            <summary>
                Occurs when a portal is placed in the world.
            </summary>
            <seealso cref="T:BotBits.Events.PlayerEvent`1" />
        </member>
        <member name="M:BotBits.Events.PortalPlaceEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.PortalPlaceEvent" /> class.
            </summary>
            <param name="message">The EE message.</param>
            <param name="client"></param>
        </member>
        <member name="P:BotBits.Events.PortalPlaceEvent.PortalId">
            <summary>
                Gets or sets the portal identifier.
            </summary>
            <value>The portal identifier.</value>
        </member>
        <member name="P:BotBits.Events.PortalPlaceEvent.PortalRotation">
            <summary>
                Gets or sets the portal rotation.
            </summary>
            <value>The portal rotation.</value>
        </member>
        <member name="P:BotBits.Events.PortalPlaceEvent.PortalTarget">
            <summary>
                Gets or sets the portal target.
            </summary>
            <value>The portal target.</value>
        </member>
        <member name="P:BotBits.Events.PortalPlaceEvent.Id">
            <summary>
                Gets or sets the block id.
            </summary>
            <value>
                The block id.
            </value>
        </member>
        <member name="P:BotBits.Events.PortalPlaceEvent.X">
            <summary>
                Gets or sets the position x.
            </summary>
            <value>The position x.</value>
        </member>
        <member name="P:BotBits.Events.PortalPlaceEvent.Y">
            <summary>
                Gets or sets the position y.
            </summary>
            <value>The position y.</value>
        </member>
        <member name="T:BotBits.Events.ReceiveEvent`1">
            <summary>
                Occurs when an EE message is received.
            </summary>
            <seealso cref="T:BotBits.Event`1" />
        </member>
        <member name="M:BotBits.Events.ReceiveEvent`1.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.ReceiveEvent`1" /> class.
            </summary>
            <param name="client"></param>
            <param name="message">The message.</param>
        </member>
        <member name="P:BotBits.Events.ReceiveEvent`1.PlayerIOMessage">
            <summary>
                Gets the player io message.
            </summary>
            <value>The player io message.</value>
        </member>
        <member name="M:BotBits.Events.ReceiveEvent`1.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:BotBits.Events.RefreshShopEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.RefreshShopEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="T:BotBits.Events.LoadLevelEvent">
            <summary>
                Occurs when world is reverted to last save using /loadlevel command.
            </summary>
            <seealso cref="T:BotBits.Events.ReceiveEvent`1" />
        </member>
        <member name="M:BotBits.Events.LoadLevelEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.LoadLevelEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="T:BotBits.Events.MorphablePlaceEvent">
            <summary>
                Occurs when someone places morphable block.
            </summary>
            <seealso cref="T:BotBits.Events.PlayerEvent`1" />
        </member>
        <member name="M:BotBits.Events.MorphablePlaceEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.MorphablePlaceEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="P:BotBits.Events.MorphablePlaceEvent.Layer">
            <summary>
                Gets or sets the layer.
            </summary>
            <value>
                The layer.
            </value>
        </member>
        <member name="P:BotBits.Events.MorphablePlaceEvent.Rotation">
            <summary>
                Gets or sets the rotation.
            </summary>
            <value>The rotation.</value>
        </member>
        <member name="P:BotBits.Events.MorphablePlaceEvent.Id">
            <summary>
                Gets or sets the block id.
            </summary>
            <value>
                The block id.
            </value>
        </member>
        <member name="P:BotBits.Events.MorphablePlaceEvent.X">
            <summary>
                Gets or sets the position x.
            </summary>
            <value>The position x.</value>
        </member>
        <member name="P:BotBits.Events.MorphablePlaceEvent.Y">
            <summary>
                Gets or sets the position y.
            </summary>
            <value>The position y.</value>
        </member>
        <member name="T:BotBits.Events.SavedEvent">
            <summary>
                Occurs when you successfully saved world.
            </summary>
            <seealso cref="T:BotBits.Events.ReceiveEvent`1" />
        </member>
        <member name="M:BotBits.Events.SavedEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.SavedEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="T:BotBits.Events.OldChatEvent">
            <summary>
                Occurs shortly after join.
                Contains information about chat message from before you joined world.
            </summary>
            <seealso cref="T:BotBits.Events.ReceiveEvent`1" />
        </member>
        <member name="M:BotBits.Events.OldChatEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.OldChatEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="P:BotBits.Events.OldChatEvent.Friend">
            <summary>
                Gets or sets a value indicating whether this player is my friend.
            </summary>
            <value><c>true</c> if this player is my friend; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BotBits.Events.OldChatEvent.Text">
            <summary>
                Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:BotBits.Events.OldChatEvent.Username">
            <summary>
                Gets or sets the username.
            </summary>
            <value>The username.</value>
        </member>
        <member name="T:BotBits.Events.ChatEvent">
            <summary>
                Occurs when a player sends a chat message.
            </summary>
            <seealso cref="T:BotBits.Events.PlayerEvent`1" />
        </member>
        <member name="M:BotBits.Events.ChatEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.ChatEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="P:BotBits.Events.ChatEvent.Text">
            <summary>
                Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="T:BotBits.Events.ShowKeyEvent">
            <summary>
                Occurs when key deactivates or timed door change their state.
            </summary>
            <seealso cref="T:BotBits.Events.ReceiveEvent`1" />
        </member>
        <member name="M:BotBits.Events.ShowKeyEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.ShowKeyEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="P:BotBits.Events.ShowKeyEvent.Key">
            <summary>
                Gets or sets the keys.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="T:BotBits.Events.SilverCrownEvent">
            <summary>
                Occurs when someone receives silver crown.
            </summary>
            <seealso cref="T:BotBits.Events.PlayerEvent`1" />
        </member>
        <member name="M:BotBits.Events.SilverCrownEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.SilverCrownEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="T:BotBits.Events.SoundPlaceEvent">
            <summary>
                Occurs when a sound block is placed in the world.
            </summary>
            <seealso cref="T:BotBits.Events.PlayerEvent`1" />
        </member>
        <member name="M:BotBits.Events.SoundPlaceEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.SoundPlaceEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="P:BotBits.Events.SoundPlaceEvent.SoundId">
            <summary>
                Gets or sets the sound identifier.
            </summary>
            <value>The sound identifier.</value>
        </member>
        <member name="P:BotBits.Events.SoundPlaceEvent.Id">
            <summary>
                Gets or sets the block id.
            </summary>
            <value>
                The block id.
            </value>
        </member>
        <member name="P:BotBits.Events.SoundPlaceEvent.X">
            <summary>
                Gets or sets the position x.
            </summary>
            <value>The position x.</value>
        </member>
        <member name="P:BotBits.Events.SoundPlaceEvent.Y">
            <summary>
                Gets or sets the position y.
            </summary>
            <value>The position y.</value>
        </member>
        <member name="T:BotBits.Events.MultiRespawnEvent">
            <summary>
                Occurs when mutliple players are teleported. This event gets raised for respawns of any kind, including death.
            </summary>
            <seealso cref="T:BotBits.Events.ReceiveEvent`1" />
        </member>
        <member name="M:BotBits.Events.MultiRespawnEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.MultiRespawnEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="P:BotBits.Events.MultiRespawnEvent.Data">
            <summary>
                Gets or sets the coordinates.
            </summary>
            <value>The coordinates.</value>
        </member>
        <member name="P:BotBits.Events.MultiRespawnEvent.ResetPlayers">
            <summary>
                Gets or sets a value indicating whether the players need to be reset.
            </summary>
            <value><c>true</c> if the players need to be reset; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:BotBits.Events.TeleportEvent">
            <summary>
                Occurs when a player is teleported to another location.
            </summary>
            <seealso cref="T:BotBits.Events.PlayerEvent`1" />
        </member>
        <member name="M:BotBits.Events.TeleportEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.TeleportEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="P:BotBits.Events.TeleportEvent.BlockX">
            <summary>
                Gets the block x.
            </summary>
            <value>The block x.</value>
        </member>
        <member name="P:BotBits.Events.TeleportEvent.BlockY">
            <summary>
                Gets the block y.
            </summary>
            <value>The block y.</value>
        </member>
        <member name="P:BotBits.Events.TeleportEvent.X">
            <summary>
                Gets or sets the user coordinate x.
            </summary>
            <value>The user position x.</value>
        </member>
        <member name="P:BotBits.Events.TeleportEvent.Y">
            <summary>
                Gets or sets the user coordinate y.
            </summary>
            <value>The user position y.</value>
        </member>
        <member name="T:BotBits.Events.UpdateMetaEvent">
            <summary>
                Occurs when world metadata is updated.
            </summary>
            <seealso cref="T:BotBits.Events.ReceiveEvent`1" />
        </member>
        <member name="M:BotBits.Events.UpdateMetaEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.UpdateMetaEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="P:BotBits.Events.UpdateMetaEvent.Favorites">
            <summary>
                Gets or sets the current woots of the world.
            </summary>
            <value>The current woots.</value>
        </member>
        <member name="P:BotBits.Events.UpdateMetaEvent.OwnerUsername">
            <summary>
                Gets or sets the owner username of the world.
            </summary>
            <value>The owner username.</value>
        </member>
        <member name="P:BotBits.Events.UpdateMetaEvent.Plays">
            <summary>
                Gets or sets the plays of the world.
            </summary>
            <value>The plays.</value>
        </member>
        <member name="P:BotBits.Events.UpdateMetaEvent.Likes">
            <summary>
                Gets or sets the total woots of the world.
            </summary>
            <value>The total woots.</value>
        </member>
        <member name="P:BotBits.Events.UpdateMetaEvent.WorldName">
            <summary>
                Gets or sets the name of the world.
            </summary>
            <value>The name of the world.</value>
        </member>
        <member name="T:BotBits.Events.UpgradeEvent">
            <summary>
                Occurs when the server version has increased.
            </summary>
        </member>
        <member name="M:BotBits.Events.UpgradeEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.UpgradeEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="T:BotBits.Events.WorldPortalPlaceEvent">
            <summary>
                Occurs when a world portal is placed in the world.
            </summary>
        </member>
        <member name="M:BotBits.Events.WorldPortalPlaceEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.WorldPortalPlaceEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="P:BotBits.Events.WorldPortalPlaceEvent.WorldPortalTarget">
            <summary>
                Gets or sets the world portal target.
            </summary>
            <value>The world portal target.</value>
        </member>
        <member name="P:BotBits.Events.WorldPortalPlaceEvent.Id">
            <summary>
                Gets or sets the block id.
            </summary>
            <value>
                The block id.
            </value>
        </member>
        <member name="P:BotBits.Events.WorldPortalPlaceEvent.X">
            <summary>
                Gets or sets the position x.
            </summary>
            <value>The position x.</value>
        </member>
        <member name="P:BotBits.Events.WorldPortalPlaceEvent.Y">
            <summary>
                Gets or sets the position y.
            </summary>
            <value>The position y.</value>
        </member>
        <member name="T:BotBits.Events.WriteEvent">
            <summary>
                Occurs when a non-player message is received. (System messages, etc.)
            </summary>
        </member>
        <member name="M:BotBits.Events.WriteEvent.#ctor(BotBits.BotBitsClient,PlayerIOClient.Message)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Events.WriteEvent" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="client"></param>
        </member>
        <member name="P:BotBits.Events.WriteEvent.Text">
            <summary>
                Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:BotBits.Events.WriteEvent.Title">
            <summary>
                Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="M:BotBits.Nito.Async.BotBitsSynchronizationContext.#ctor(BotBits.Nito.Async.ActionDispatcher)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Nito.Async.BotBitsSynchronizationContext" /> class by using the
                specified <see cref="P:BotBits.Nito.Async.BotBitsSynchronizationContext.ActionDispatcher" />.
            </summary>
            <param name="actionDispatcher">The action queue to associate with this <see cref="N:BotBits" />.</param>
        </member>
        <member name="P:BotBits.Nito.Async.BotBitsSynchronizationContext.ActionDispatcher">
            <summary>
                Gets or sets the action queue for the thread to synchronize with.
            </summary>
        </member>
        <member name="M:BotBits.Nito.Async.BotBitsSynchronizationContext.CreateCopy">
            <summary>
                Creates a copy of this <see cref="T:BotBits.Nito.Async.BotBitsSynchronizationContext" />.
            </summary>
            <returns>The copy of this synchronization context.</returns>
            <threadsafety>This method may be called by any thread at any time.</threadsafety>
        </member>
        <member name="M:BotBits.Nito.Async.BotBitsSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
                Invokes the callback in the synchronization context asynchronously. The callback is placed in the action queue.
            </summary>
            <param name="d">The delegate to call.</param>
            <param name="state">The object passed to the delegate.</param>
            <threadsafety>This method may be called by any thread at any time.</threadsafety>
        </member>
        <member name="M:BotBits.Nito.Async.BotBitsSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
                Invokes the callback in the synchronization context synchronously. The callback is placed in the action queue.
            </summary>
            <param name="d">The delegate to call.</param>
            <param name="state">The object passed to the delegate.</param>
            <remarks>
                <para>
                    This method cannot be called from the thread running the action queue associated with this synchronization
                    context.
                </para>
            </remarks>
        </member>
        <member name="F:BotBits.Nito.Async.ActionDispatcher._actionQueue">
            <summary>
                The queue holding the actions to run.
            </summary>
        </member>
        <member name="F:BotBits.Nito.Async.ActionDispatcher._actionQueueNotEmptyEvent">
            <summary>
                An event that is signalled when the action queue has at least one action to run.
            </summary>
        </member>
        <member name="M:BotBits.Nito.Async.ActionDispatcher.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Nito.Async.ActionDispatcher" /> class with an empty action queue.
            </summary>
            <example>
                The following code sample demonstrates how to create an ActionDispatcher, queue an exit action, and run it:
                <code source="..\..\Source\Examples\DocumentationExamples\ActionDispatcher\ConstructQueueExitRun.cs" />
            </example>
        </member>
        <member name="P:BotBits.Nito.Async.ActionDispatcher.Current">
            <summary>
                Gets the currently active action queue. For executing actions, this is their own action queue; for other threads,
                this is null.
            </summary>
            <threadsafety>This method may be called by any thread at any time.</threadsafety>
            <example>
                The following code sample demonstrates how to queue an action to an ActionDispatcher and access the Current
                property:
                <code source="..\..\Source\Examples\DocumentationExamples\ActionDispatcher\QueueActionCurrent.cs" />
            </example>
        </member>
        <member name="M:BotBits.Nito.Async.ActionDispatcher.Dispose">
            <summary>
                Releases all resources.
            </summary>
            <threadsafety>
                <note class="warning">This method should not be called while a thread is executing <see cref="M:BotBits.Nito.Async.ActionDispatcher.Run" />.</note>
                <para>
                    If there is a thread executing <see cref="M:BotBits.Nito.Async.ActionDispatcher.Run" />, call <see cref="M:BotBits.Nito.Async.ActionDispatcher.QueueExit" /> and wait for the thread to
                    exit before calling this method.
                </para>
            </threadsafety>
            <example>
                The following code sample demonstrates how to create an ActionDispatcher, queue an exit action, and run it:
                <code source="..\..\Source\Examples\DocumentationExamples\ActionDispatcher\ConstructQueueExitRun.cs" />
            </example>
        </member>
        <member name="M:BotBits.Nito.Async.ActionDispatcher.Run">
            <summary>
                Executes the action queue.
            </summary>
            <remarks>
                <para>
                    This method only returns after <see cref="M:BotBits.Nito.Async.ActionDispatcher.QueueExit" /> is called. When the action queue is empty, the thread
                    waits for additional actions to be queued via <see cref="M:BotBits.Nito.Async.ActionDispatcher.QueueAction(System.Action)" /> or <see cref="M:BotBits.Nito.Async.ActionDispatcher.QueueExit" />.
                </para>
                <para>
                    Executing actions may access their own action queue via the <see cref="P:BotBits.Nito.Async.ActionDispatcher.Current" /> property, and may queue
                    other actions and/or an exit action.
                </para>
                <para>This method should not be called from a thread pool thread in most cases.</para>
            </remarks>
            <threadsafety>
                <para>This method may only be called by one thread at a time.</para>
                <para>
                    If event-based asynchronous components are owned by this ActionDispatcher (or if any actions access
                    <see cref="P:System.Threading.SynchronizationContext.Current" />), then this method may only be called by one thread.
                </para>
            </threadsafety>
            <example>
                The following code sample demonstrates how to create an ActionDispatcher, queue an exit action, and run it:
                <code source="..\..\Source\Examples\DocumentationExamples\ActionDispatcher\ConstructQueueExitRun.cs" />
            </example>
        </member>
        <member name="M:BotBits.Nito.Async.ActionDispatcher.QueueAction(System.Action)">
            <summary>
                Queues an action to an action dispatcher.
            </summary>
            <param name="action">The action to execute.</param>
            <remarks>
                <para>Actions are executed in the order they are queued.</para>
                <para>Actions may queue other actions and/or an exit action by using the <see cref="P:BotBits.Nito.Async.ActionDispatcher.Current" /> action dispatcher.</para>
            </remarks>
            <threadsafety>This method may be called by any thread at any time.</threadsafety>
            <example>
                The following code sample demonstrates how to queue an action to an ActionDispatcher and access the Current
                property:
                <code source="..\..\Source\Examples\DocumentationExamples\ActionDispatcher\QueueActionCurrent.cs" />
            </example>
        </member>
        <member name="M:BotBits.Nito.Async.ActionDispatcher.QueueExit">
            <summary>
                Queues an exit action, causing <see cref="M:BotBits.Nito.Async.ActionDispatcher.Run" /> to return.
            </summary>
            <remarks>
                <para>
                    An exit action may be queued by an action from within <see cref="M:BotBits.Nito.Async.ActionDispatcher.Run" />; alternatively, another thread may
                    queue the exit action.
                </para>
                <para>
                    <see cref="M:BotBits.Nito.Async.ActionDispatcher.Run" /> may not return immediately; the exit action is queued like any other action and must wait
                    its turn.
                </para>
            </remarks>
            <threadsafety>This method may be called by any thread at any time.</threadsafety>
            <example>
                The following code sample demonstrates how to create an ActionDispatcher, queue an exit action, and run it:
                <code source="..\..\Source\Examples\DocumentationExamples\ActionDispatcher\ConstructQueueExitRun.cs" />
            </example>
        </member>
        <member name="M:BotBits.Nito.Async.ActionDispatcher.DequeueAction">
            <summary>
                Waits for the action queue to be non-empty, removes a single action, and returns it.
            </summary>
            <returns>The next action from the action queue.</returns>
        </member>
        <member name="T:BotBits.Nito.Async.ActionDispatcher.ExitException">
            <summary>
                A special exception type; when thrown, this indicates the thread should exit <see cref="M:BotBits.Nito.Async.ActionDispatcher.Run" />.
            </summary>
        </member>
        <member name="T:BotBits.Nito.Deque`1">
            <summary>
                A double-ended queue (deque), which provides O(1) indexed access, O(1) removals from the front and back, amortized
                O(1) insertions to the front and back, and O(N) insertions and removals anywhere else (with the operations getting
                slower as the index approaches the middle).
            </summary>
            <typeparam name="T">The type of elements contained in the deque.</typeparam>
        </member>
        <member name="F:BotBits.Nito.Deque`1.DefaultCapacity">
            <summary>
                The default capacity.
            </summary>
        </member>
        <member name="F:BotBits.Nito.Deque`1._buffer">
            <summary>
                The circular buffer that holds the view.
            </summary>
        </member>
        <member name="F:BotBits.Nito.Deque`1._offset">
            <summary>
                The offset into <see cref="F:BotBits.Nito.Deque`1._buffer" /> where the view begins.
            </summary>
        </member>
        <member name="M:BotBits.Nito.Deque`1.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Nito.Deque`1" /> class with the specified capacity.
            </summary>
            <param name="capacity">The initial capacity. Must be greater than <c>0</c>.</param>
        </member>
        <member name="M:BotBits.Nito.Deque`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Nito.Deque`1" /> class with the elements from the specified
                collection.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:BotBits.Nito.Deque`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.Nito.Deque`1" /> class.
            </summary>
        </member>
        <member name="P:BotBits.Nito.Deque`1.IsEmpty">
            <summary>
                Gets a value indicating whether this instance is empty.
            </summary>
        </member>
        <member name="P:BotBits.Nito.Deque`1.IsFull">
            <summary>
                Gets a value indicating whether this instance is at full capacity.
            </summary>
        </member>
        <member name="P:BotBits.Nito.Deque`1.IsSplit">
            <summary>
                Gets a value indicating whether the buffer is "split" (meaning the beginning of the view is at a later index in
                <see cref="F:BotBits.Nito.Deque`1._buffer" /> than the end).
            </summary>
        </member>
        <member name="P:BotBits.Nito.Deque`1.Capacity">
            <summary>
                Gets or sets the capacity for this deque. This value must always be greater than zero, and this property cannot be
                set to a value less than <see cref="P:BotBits.Nito.Deque`1.Count" />.
            </summary>
            <exception cref="T:System.InvalidOperationException"><c>Capacity</c> cannot be set to a value less than <see cref="P:BotBits.Nito.Deque`1.Count" />.</exception>
        </member>
        <member name="P:BotBits.Nito.Deque`1.Count">
            <summary>
                Gets the number of elements contained in this deque.
            </summary>
            <returns>The number of elements contained in this deque.</returns>
        </member>
        <member name="M:BotBits.Nito.Deque`1.Clear">
            <summary>
                Removes all items from this deque.
            </summary>
        </member>
        <member name="M:BotBits.Nito.Deque`1.DequeIndexToBufferIndex(System.Int32)">
            <summary>
                Applies the offset to <paramref name="index" />, resulting in a buffer index.
            </summary>
            <param name="index">The deque index.</param>
            <returns>The buffer index.</returns>
        </member>
        <member name="M:BotBits.Nito.Deque`1.DoGetItem(System.Int32)">
            <summary>
                Gets an element at the specified view index.
            </summary>
            <param name="index">The zero-based view index of the element to get. This index is guaranteed to be valid.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="M:BotBits.Nito.Deque`1.DoSetItem(System.Int32,`0)">
            <summary>
                Sets an element at the specified view index.
            </summary>
            <param name="index">The zero-based view index of the element to get. This index is guaranteed to be valid.</param>
            <param name="item">The element to store in the list.</param>
        </member>
        <member name="M:BotBits.Nito.Deque`1.DoInsert(System.Int32,`0)">
            <summary>
                Inserts an element at the specified view index.
            </summary>
            <param name="index">
                The zero-based view index at which the element should be inserted. This index is guaranteed to be
                valid.
            </param>
            <param name="item">The element to store in the list.</param>
        </member>
        <member name="M:BotBits.Nito.Deque`1.DoRemoveAt(System.Int32)">
            <summary>
                Removes an element at the specified view index.
            </summary>
            <param name="index">The zero-based view index of the element to remove. This index is guaranteed to be valid.</param>
        </member>
        <member name="M:BotBits.Nito.Deque`1.PostIncrement(System.Int32)">
            <summary>
                Increments <see cref="F:BotBits.Nito.Deque`1._offset" /> by <paramref name="value" /> using modulo-<see cref="P:BotBits.Nito.Deque`1.Capacity" /> arithmetic.
            </summary>
            <param name="value">The value by which to increase <see cref="F:BotBits.Nito.Deque`1._offset" />. May not be negative.</param>
            <returns>The value of <see cref="F:BotBits.Nito.Deque`1._offset" /> after it was incremented.</returns>
        </member>
        <member name="M:BotBits.Nito.Deque`1.PreDecrement(System.Int32)">
            <summary>
                Decrements <see cref="F:BotBits.Nito.Deque`1._offset" /> by <paramref name="value" /> using modulo-<see cref="P:BotBits.Nito.Deque`1.Capacity" /> arithmetic.
            </summary>
            <param name="value">
                The value by which to reduce <see cref="F:BotBits.Nito.Deque`1._offset" />. May not be negative or greater than
                <see cref="F:BotBits.Nito.Deque`1._offset" />.
            </param>
            <returns>The value of <see cref="F:BotBits.Nito.Deque`1._offset" /> before it was decremented.</returns>
        </member>
        <member name="M:BotBits.Nito.Deque`1.DoAddToBack(`0)">
            <summary>
                Inserts a single element to the back of the view. <see cref="P:BotBits.Nito.Deque`1.IsFull" /> must be false when this method is called.
            </summary>
            <param name="value">The element to insert.</param>
        </member>
        <member name="M:BotBits.Nito.Deque`1.DoAddToFront(`0)">
            <summary>
                Inserts a single element to the front of the view. <see cref="P:BotBits.Nito.Deque`1.IsFull" /> must be false when this method is called.
            </summary>
            <param name="value">The element to insert.</param>
        </member>
        <member name="M:BotBits.Nito.Deque`1.DoRemoveFromBack">
            <summary>
                Removes and returns the last element in the view. <see cref="P:BotBits.Nito.Deque`1.IsEmpty" /> must be false when this method is called.
            </summary>
            <returns>The former last element.</returns>
        </member>
        <member name="M:BotBits.Nito.Deque`1.DoRemoveFromFront">
            <summary>
                Removes and returns the first element in the view. <see cref="P:BotBits.Nito.Deque`1.IsEmpty" /> must be false when this method is called.
            </summary>
            <returns>The former first element.</returns>
        </member>
        <member name="M:BotBits.Nito.Deque`1.DoInsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
                Inserts a range of elements into the view.
            </summary>
            <param name="index">The index into the view at which the elements are to be inserted.</param>
            <param name="collection">The elements to insert.</param>
            <param name="collectionCount">
                The number of elements in <paramref name="collection" />. Must be greater than zero, and
                the sum of <paramref name="collectionCount" /> and <see cref="P:BotBits.Nito.Deque`1.Count" /> must be less than or equal to
                <see cref="P:BotBits.Nito.Deque`1.Capacity" />.
            </param>
        </member>
        <member name="M:BotBits.Nito.Deque`1.DoRemoveRange(System.Int32,System.Int32)">
            <summary>
                Removes a range of elements from the view.
            </summary>
            <param name="index">The index into the view at which the range begins.</param>
            <param name="collectionCount">
                The number of elements in the range. This must be greater than 0 and less than or equal
                to <see cref="P:BotBits.Nito.Deque`1.Count" />.
            </param>
        </member>
        <member name="M:BotBits.Nito.Deque`1.EnsureCapacityForOneElement">
            <summary>
                Doubles the capacity if necessary to make room for one more element. When this method returns,
                <see cref="P:BotBits.Nito.Deque`1.IsFull" /> is false.
            </summary>
        </member>
        <member name="M:BotBits.Nito.Deque`1.AddToBack(`0)">
            <summary>
                Inserts a single element at the back of this deque.
            </summary>
            <param name="value">The element to insert.</param>
        </member>
        <member name="M:BotBits.Nito.Deque`1.AddToFront(`0)">
            <summary>
                Inserts a single element at the front of this deque.
            </summary>
            <param name="value">The element to insert.</param>
        </member>
        <member name="M:BotBits.Nito.Deque`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Inserts a collection of elements into this deque.
            </summary>
            <param name="index">The index at which the collection is inserted.</param>
            <param name="collection">The collection of elements to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index" /> is not a valid index to an insertion point for
                the source.
            </exception>
        </member>
        <member name="M:BotBits.Nito.Deque`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
                Removes a range of elements from this deque.
            </summary>
            <param name="offset">The index into the deque at which the range begins.</param>
            <param name="count">The number of elements to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Either <paramref name="offset" /> or <paramref name="count" /> is less
                than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
                The range [<paramref name="offset" />, <paramref name="offset" /> +
                <paramref name="count" />) is not within the range [0, <see cref="P:BotBits.Nito.Deque`1.Count" />).
            </exception>
        </member>
        <member name="M:BotBits.Nito.Deque`1.RemoveFromBack">
            <summary>
                Removes and returns the last element of this deque.
            </summary>
            <returns>The former last element.</returns>
            <exception cref="T:System.InvalidOperationException">The deque is empty.</exception>
        </member>
        <member name="M:BotBits.Nito.Deque`1.RemoveFromFront">
            <summary>
                Removes and returns the first element of this deque.
            </summary>
            <returns>The former first element.</returns>
            <exception cref="T:System.InvalidOperationException">The deque is empty.</exception>
        </member>
        <member name="P:BotBits.Nito.Deque`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
                Gets a value indicating whether this list is read-only. This implementation always returns <c>false</c>.
            </summary>
            <returns>true if this list is read-only; otherwise, false.</returns>
        </member>
        <member name="P:BotBits.Nito.Deque`1.Item(System.Int32)">
            <summary>
                Gets or sets the item at the specified index.
            </summary>
            <param name="index">The index of the item to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is not a valid index in this list.</exception>
            <exception cref="T:System.NotSupportedException">This property is set and the list is read-only.</exception>
        </member>
        <member name="M:BotBits.Nito.Deque`1.Insert(System.Int32,`0)">
            <summary>
                Inserts an item to this list at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert into this list.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index" /> is not a valid index in this list.
            </exception>
            <exception cref="T:System.NotSupportedException">
                This list is read-only.
            </exception>
        </member>
        <member name="M:BotBits.Nito.Deque`1.RemoveAt(System.Int32)">
            <summary>
                Removes the item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index" /> is not a valid index in this list.
            </exception>
            <exception cref="T:System.NotSupportedException">
                This list is read-only.
            </exception>
        </member>
        <member name="M:BotBits.Nito.Deque`1.IndexOf(`0)">
            <summary>
                Determines the index of a specific item in this list.
            </summary>
            <param name="item">The object to locate in this list.</param>
            <returns>The index of <paramref name="item" /> if found in this list; otherwise, -1.</returns>
        </member>
        <member name="M:BotBits.Nito.Deque`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
                Adds an item to the end of this list.
            </summary>
            <param name="item">The object to add to this list.</param>
            <exception cref="T:System.NotSupportedException">
                This list is read-only.
            </exception>
        </member>
        <member name="M:BotBits.Nito.Deque`1.System#Collections#Generic#ICollection{T}#Contains(`0)">
            <summary>
                Determines whether this list contains a specific value.
            </summary>
            <param name="item">The object to locate in this list.</param>
            <returns>
                true if <paramref name="item" /> is found in this list; otherwise, false.
            </returns>
        </member>
        <member name="M:BotBits.Nito.Deque`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
            <summary>
                Copies the elements of this list to an <see cref="T:System.Array" />, starting at a particular
                <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">
                The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied
                from this slice. The <see cref="T:System.Array" /> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="array" /> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="arrayIndex" /> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.
                -or-
                The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the
                available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.
            </exception>
        </member>
        <member name="M:BotBits.Nito.Deque`1.Remove(`0)">
            <summary>
                Removes the first occurrence of a specific object from this list.
            </summary>
            <param name="item">The object to remove from this list.</param>
            <returns>
                true if <paramref name="item" /> was successfully removed from this list; otherwise, false. This method also
                returns false if <paramref name="item" /> is not found in this list.
            </returns>
            <exception cref="T:System.NotSupportedException">
                This list is read-only.
            </exception>
        </member>
        <member name="M:BotBits.Nito.Deque`1.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
                A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:BotBits.Nito.Deque`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
                An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:BotBits.Nito.Deque`1.ObjectIsT(System.Object)">
            <summary>
                Returns whether or not the type of a given item indicates it is appropriate for storing in this container.
            </summary>
            <param name="item">The item to test.</param>
            <returns><c>true</c> if the item is appropriate to store in this container; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:BotBits.Nito.Deque`1.CheckNewIndexArgument(System.Int32,System.Int32)">
            <summary>
                Checks the <paramref name="index" /> argument to see if it refers to a valid insertion point in a source of a given
                length.
            </summary>
            <param name="sourceLength">The length of the source. This parameter is not checked for validity.</param>
            <param name="index">The index into the source.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index" /> is not a valid index to an insertion point for
                the source.
            </exception>
        </member>
        <member name="M:BotBits.Nito.Deque`1.CheckExistingIndexArgument(System.Int32,System.Int32)">
            <summary>
                Checks the <paramref name="index" /> argument to see if it refers to an existing element in a source of a given
                length.
            </summary>
            <param name="sourceLength">The length of the source. This parameter is not checked for validity.</param>
            <param name="index">The index into the source.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index" /> is not a valid index to an existing element for
                the source.
            </exception>
        </member>
        <member name="M:BotBits.Nito.Deque`1.CheckRangeArguments(System.Int32,System.Int32,System.Int32)">
            <summary>
                Checks the <paramref name="offset" /> and <paramref name="count" /> arguments for validity when applied to a source
                of a given length. Allows 0-element ranges, including a 0-element range at the end of the source.
            </summary>
            <param name="sourceLength">The length of the source. This parameter is not checked for validity.</param>
            <param name="offset">The index into source at which the range begins.</param>
            <param name="count">The number of elements in the range.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Either <paramref name="offset" /> or <paramref name="count" /> is less
                than 0.
            </exception>
            <exception cref="T:System.ArgumentException">The range [offset, offset + count) is not within the range [0, sourceLength).</exception>
        </member>
        <member name="T:BotBits.Badge">
            <summary>
            </summary>
        </member>
        <member name="F:BotBits.Badge.ADV">
            <summary>
                Adventure League
            </summary>
        </member>
        <member name="F:BotBits.Badge.CLR">
            <summary>
                Colorful
            </summary>
        </member>
        <member name="F:BotBits.Badge.END">
            <summary>
                Endurance
            </summary>
        </member>
        <member name="F:BotBits.Badge.FFS">
            <summary>
                Fractured Fingers
            </summary>
        </member>
        <member name="F:BotBits.Badge.HLW">
            <summary>
                Halloween
            </summary>
        </member>
        <member name="F:BotBits.Badge.LCD">
            <summary>
                Looks Can Deceive
            </summary>
        </member>
        <member name="F:BotBits.Badge.PP1">
            <summary>
                Puzzle Pack 1
            </summary>
        </member>
        <member name="F:BotBits.Badge.RNS">
            <summary>
                Ancient Ruins
            </summary>
        </member>
        <member name="F:BotBits.Badge.SPR">
            <summary>
                Spring
            </summary>
        </member>
        <member name="F:BotBits.Badge.STM">
            <summary>
                Story Time
            </summary>
        </member>
        <member name="F:BotBits.Badge.TNR">
            <summary>
                Tunnel Rats
            </summary>
        </member>
        <member name="F:BotBits.Badge.TTR">
            <summary>
                Tutorials
            </summary>
        </member>
        <member name="F:BotBits.Badge.WTR">
            <summary>
                Winter
            </summary>
        </member>
        <member name="T:BotBits.WorldStatus">
            <summary>
                Status for world from crew.
            </summary>
        </member>
        <member name="F:BotBits.WorldStatus.NonCrew">
            <summary>
                World is not part of the crew.
            </summary>
        </member>
        <member name="F:BotBits.WorldStatus.WIP">
            <summary>
                World is under construction. Only crew members are allowed to join.
            </summary>
        </member>
        <member name="F:BotBits.WorldStatus.Open">
            <summary>
                World is accessible by everyone and crew members with required rank can still save it.
            </summary>
        </member>
        <member name="F:BotBits.WorldStatus.Released">
            <summary>
                World is accessible and only world hoster can save the world.
            </summary>
        </member>
        <member name="M:BotBits.WorldAreaEnumerableExtensions.CreateCopy(BotBits.IWorldAreaEnumerable{BotBits.ForegroundBlock,BotBits.BackgroundBlock})">
            <summary>
                Creates a copy of the given world.
            </summary>
            <param name="worldArea">The block area.</param>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.SetLobbyPreviewEnabledSendMessage">
            <summary>
                Sent to disable or enable lobby preview.
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.SetLobbyPreviewEnabledSendMessage.#ctor(System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.SendMessages.SetLobbyPreviewEnabledSendMessage" /> class.
            </summary>
            <param name="enabled">if set to <c>true</c>, lobby preview is enabled.</param>
        </member>
        <member name="P:BotBits.SendMessages.SetLobbyPreviewEnabledSendMessage.Enabled">
            <summary>
                Gets or sets a value indicating whether lobby preview is enabled.
            </summary>
            <value>
                <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:BotBits.SendMessages.SetLobbyPreviewEnabledSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.SmileyGoldBolderSendMessage">
            <summary>
                Sent to enable or disable the gold smiley border
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.SmileyGoldBolderSendMessage.#ctor(System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.SendMessages.SmileyGoldBolderSendMessage" /> class.
            </summary>
            <param name="enabled">if set to <c>true</c>, minimap is enabled.</param>
        </member>
        <member name="P:BotBits.SendMessages.SmileyGoldBolderSendMessage.Enabled">
            <summary>
                Gets or sets a value indicating whether the gold smiley border should be enabled.
            </summary>
            <value>
                <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:BotBits.SendMessages.SmileyGoldBolderSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.SetMinimapEnabledSendMessage">
            <summary>
                Sent to disable or enable minimap
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.SetMinimapEnabledSendMessage.#ctor(System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.SendMessages.SetMinimapEnabledSendMessage" /> class.
            </summary>
            <param name="enabled">if set to <c>true</c>, minimap is enabled.</param>
        </member>
        <member name="P:BotBits.SendMessages.SetMinimapEnabledSendMessage.Enabled">
            <summary>
                Gets or sets a value indicating whether minimap is enabled.
            </summary>
            <value>
                <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:BotBits.SendMessages.SetMinimapEnabledSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.SmileySendMessage">
            <summary>
                Sent to change smiley.
            </summary>
        </member>
        <member name="M:BotBits.SendMessages.SmileySendMessage.#ctor(BotBits.Smiley)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.SendMessages.SmileySendMessage" /> class.
            </summary>
            <param name="smiley">The face.</param>
        </member>
        <member name="P:BotBits.SendMessages.SmileySendMessage.Smiley">
            <summary>
                Gets or sets the face.
            </summary>
            <value>
                The face.
            </value>
        </member>
        <member name="M:BotBits.SendMessages.SmileySendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.TouchCakeSendMessage">
            <summary>
                Sent to touch a cake.
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.TouchCakeSendMessage.#ctor(System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.SendMessages.TouchCakeSendMessage" /> class.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
        </member>
        <member name="P:BotBits.SendMessages.TouchCakeSendMessage.X">
            <summary>
                Gets or sets the x-coordinate.
            </summary>
            <value>
                The x-coordinate.
            </value>
        </member>
        <member name="P:BotBits.SendMessages.TouchCakeSendMessage.Y">
            <summary>
                Gets or sets the y-coordinate.
            </summary>
            <value>
                The y-coordinate.
            </value>
        </member>
        <member name="M:BotBits.SendMessages.TouchCakeSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.AddToCrewSendMessage">
            <summary>
                Sent to add world to crew.
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.AddToCrewSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.AuraSendMessage">
            <summary>
                Sent to change aura shape and/or color.
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.AuraSendMessage.#ctor(BotBits.AuraShape,BotBits.AuraColor)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.SendMessages.AuraSendMessage" /> class.
            </summary>
            <param name="auraShape">The aura shape.</param>
            <param name="auraColor">The aura.</param>
        </member>
        <member name="P:BotBits.SendMessages.AuraSendMessage.AuraShape">
            <summary>
                Gets or sets your aura shape.
            </summary>
            <value>
                The aura shape.
            </value>
        </member>
        <member name="P:BotBits.SendMessages.AuraSendMessage.AuraColor">
            <summary>
                Gets or sets your aura color.
            </summary>
            <value>
                The aura.
            </value>
        </member>
        <member name="M:BotBits.SendMessages.AuraSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.EffectSendMessage">
            <summary>
                Sent to activate an effect.
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.EffectSendMessage.#ctor(BotBits.Effect,System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.SendMessages.EffectSendMessage" /> class.
            </summary>
            <param name="effect">The effect.</param>
            <param name="y">The y.</param>
            <param name="x">The x.</param>
        </member>
        <member name="P:BotBits.SendMessages.EffectSendMessage.Effect">
            <summary>
                Gets or sets the effect.
            </summary>
            <value>
                The effect.
            </value>
        </member>
        <member name="P:BotBits.SendMessages.EffectSendMessage.Y">
            <summary>
                Gets or sets the y.
            </summary>
            <value>
                The y.
            </value>
        </member>
        <member name="P:BotBits.SendMessages.EffectSendMessage.X">
            <summary>
                Gets or sets the x.
            </summary>
            <value>
                The x.
            </value>
        </member>
        <member name="M:BotBits.SendMessages.EffectSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.FavoriteSendMessage">
            <summary>
                Sent to favorite world.
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.FavoriteSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.LikeSendMessage">
            <summary>
                Sent to like the world.
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.LikeSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.SwitchPressSendMessage">
            <summary>
                Sent to change purple switch state.
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.SwitchPressSendMessage.#ctor(BotBits.SwitchType,System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.SendMessages.PlaceSendMessage" /> class.
            </summary>
        </member>
        <member name="M:BotBits.SendMessages.SwitchPressSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.RejectAddToCrewSendMessage">
            <summary>
                Sent to reject add to crew request.
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.RejectAddToCrewSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.RequestAddToCrewSendMessage">
            <summary>
                Sent to request add to crew.
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.RequestAddToCrewSendMessage.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.SendMessages.RequestAddToCrewSendMessage" /> class.
            </summary>
            <param name="crewId">The text.</param>
        </member>
        <member name="P:BotBits.SendMessages.RequestAddToCrewSendMessage.CrewId">
            <summary>
                Gets or sets the crew identifer.
            </summary>
            <value>
                The crew identifier.
            </value>
        </member>
        <member name="M:BotBits.SendMessages.RequestAddToCrewSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.SetCurseLimitSendMessage">
            <summary>
                Sent to change curse limit.
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.SetCurseLimitSendMessage.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.SendMessages.SetCurseLimitSendMessage" /> class.
            </summary>
            <param name="limit">The limit.</param>
        </member>
        <member name="P:BotBits.SendMessages.SetCurseLimitSendMessage.Limit">
            <summary>
                Gets or sets the limit.
            </summary>
            <value>
                The limit.
            </value>
        </member>
        <member name="M:BotBits.SendMessages.SetCurseLimitSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.SetStatusSendMessage">
            <summary>
                Sent to change crew world status.
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.SetStatusSendMessage.#ctor(BotBits.WorldStatus)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.SendMessages.SetStatusSendMessage" /> class.
            </summary>
            <param name="status">if set to <c>true</c>, spectating is allowed.</param>
        </member>
        <member name="P:BotBits.SendMessages.SetStatusSendMessage.Status">
            <summary>
                Gets or sets a value indicating whether spectating is allowed.
            </summary>
            <value>
                <c>true</c> if allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:BotBits.SendMessages.SetStatusSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.SetZombieLimitSendMessage">
            <summary>
                Sent to change zombie limit.
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.SetZombieLimitSendMessage.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.SendMessages.SetZombieLimitSendMessage" /> class.
            </summary>
            <param name="limit">The limit.</param>
        </member>
        <member name="P:BotBits.SendMessages.SetZombieLimitSendMessage.Limit">
            <summary>
                Gets or sets the limit.
            </summary>
            <value>
                The limit.
            </value>
        </member>
        <member name="M:BotBits.SendMessages.SetZombieLimitSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.TeamSendMessage">
            <summary>
                Sent to change team.
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.TeamSendMessage.#ctor(BotBits.Team,System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.SendMessages.TeamSendMessage" /> class.
            </summary>
            <param name="team">The team.</param>
            <param name="y">The y.</param>
            <param name="x">The x.</param>
        </member>
        <member name="P:BotBits.SendMessages.TeamSendMessage.Team">
            <summary>
                Gets or sets the team.
            </summary>
            <value>
                The team.
            </value>
        </member>
        <member name="P:BotBits.SendMessages.TeamSendMessage.Y">
            <summary>
                Gets or sets the y.
            </summary>
            <value>
                The y.
            </value>
        </member>
        <member name="P:BotBits.SendMessages.TeamSendMessage.X">
            <summary>
                Gets or sets the x.
            </summary>
            <value>
                The x.
            </value>
        </member>
        <member name="M:BotBits.SendMessages.TeamSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.SetAllowSpectatingSendMessage">
            <summary>
                Sent to change dis/allow spectating in the world.
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.SetAllowSpectatingSendMessage.#ctor(System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.SendMessages.SetAllowSpectatingSendMessage" /> class.
            </summary>
            <param name="allow">if set to <c>true</c>, spectating is allowed.</param>
        </member>
        <member name="P:BotBits.SendMessages.SetAllowSpectatingSendMessage.Allow">
            <summary>
                Gets or sets a value indicating whether spectating is allowed.
            </summary>
            <value>
                <c>true</c> if allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:BotBits.SendMessages.SetAllowSpectatingSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.SetHideLobbySendMessage">
            <summary>
                Sent to change hide lobby world setting.
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.SetHideLobbySendMessage.#ctor(System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.SendMessages.SetHideLobbySendMessage" /> class.
            </summary>
            <param name="hidden">if set to <c>true</c> room becomes hidden in the lobby.</param>
        </member>
        <member name="P:BotBits.SendMessages.SetHideLobbySendMessage.Hidden">
            <summary>
                Gets or sets a value indicating whether the room should be hidden in the lobby.
            </summary>
            <value>
                <c>true</c> if hidden; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:BotBits.SendMessages.SetHideLobbySendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.SetRoomDescriptionSendMessage">
            <summary>
                Sent to change world description.
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.SetRoomDescriptionSendMessage.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.SendMessages.SetRoomDescriptionSendMessage" /> class.
            </summary>
            <param name="description">The description.</param>
        </member>
        <member name="P:BotBits.SendMessages.SetRoomDescriptionSendMessage.Description">
            <summary>
                Gets or sets the description.
            </summary>
            <value>
                The description.
            </value>
        </member>
        <member name="M:BotBits.SendMessages.SetRoomDescriptionSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.SetRoomVisibleSendMessage">
            <summary>
                Sent to change world accessibility.
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.SetRoomVisibleSendMessage.#ctor(System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.SendMessages.SetEditKeySendMessage" /> class.
            </summary>
            <param name="visible">if set to <c>true</c> room becomes visible.</param>
        </member>
        <member name="P:BotBits.SendMessages.SetRoomVisibleSendMessage.Visible">
            <summary>
                Gets or sets a value indicating whether the room should be visible.
            </summary>
            <value>
                <c>true</c> if visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:BotBits.SendMessages.SetRoomVisibleSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.TimeSendMessage">
            <summary>
                Sent to request time response.
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="P:BotBits.SendMessages.TimeSendMessage.Data">
            <summary>
                Gets or sets the data.
            </summary>
            <value>
                The data.
            </value>
        </member>
        <member name="M:BotBits.SendMessages.TimeSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.UnfavoriteSendMessage">
            <summary>
                Sent to un-favorite the world.
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.UnfavoriteSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.UnlikeSendMessage">
            <summary>
                Sent to un-like the world.
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.UnlikeSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.TouchHologramSendMessage">
            <summary>
                Sent to touch a hologram.
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.TouchHologramSendMessage.#ctor(System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.SendMessages.TouchHologramSendMessage" /> class.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
        </member>
        <member name="P:BotBits.SendMessages.TouchHologramSendMessage.X">
            <summary>
                Gets or sets the x-coordinate.
            </summary>
            <value>
                The x-coordinate.
            </value>
        </member>
        <member name="P:BotBits.SendMessages.TouchHologramSendMessage.Y">
            <summary>
                Gets or sets the y-coordinate.
            </summary>
            <value>
                The y-coordinate.
            </value>
        </member>
        <member name="M:BotBits.SendMessages.TouchHologramSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.AccessSendMessage">
            <summary>
                Sent to attempt to get edit rights by using <see cref="P:BotBits.SendMessages.AccessSendMessage.EditKey" />.
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="P:BotBits.SendMessages.AccessSendMessage.EditKey">
            <summary>
                Gets or sets the edit key.
            </summary>
            <value>
                The edit key.
            </value>
        </member>
        <member name="M:BotBits.SendMessages.AccessSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.AutoTextSendMessage">
            <summary>
                Sent to use auto-say  message.
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.AutoTextSendMessage.#ctor(BotBits.AutoText)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.SendMessages.AutoTextSendMessage" /> class.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="P:BotBits.SendMessages.AutoTextSendMessage.Text">
            <summary>
                Gets or sets the text.
            </summary>
            <value>
                The text.
            </value>
        </member>
        <member name="M:BotBits.SendMessages.AutoTextSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.PlaceSendMessage">
            <summary>
                Sent to place block.
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.PlaceSendMessage.#ctor(BotBits.Layer,System.Int32,System.Int32,System.Int32,System.Object[])">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.SendMessages.PlaceSendMessage" /> class.
            </summary>
            <param name="layer">The layer.</param>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <param name="id">The block id.</param>
            <param name="args">The block arguments</param>
        </member>
        <member name="P:BotBits.SendMessages.PlaceSendMessage.Id">
            <summary>
                Gets or sets the block.
            </summary>
            <value>
                The block.
            </value>
        </member>
        <member name="P:BotBits.SendMessages.PlaceSendMessage.Args">
            <summary>
                Gets or sets the arguments.
            </summary>
            <value>
                The arguments.
            </value>
        </member>
        <member name="P:BotBits.SendMessages.PlaceSendMessage.Layer">
            <summary>
                Gets or sets the layer.
            </summary>
            <value>
                The layer.
            </value>
        </member>
        <member name="P:BotBits.SendMessages.PlaceSendMessage.X">
            <summary>
                Gets or sets the x-coordinate.
            </summary>
            <value>
                The x-coordinate.
            </value>
        </member>
        <member name="P:BotBits.SendMessages.PlaceSendMessage.Y">
            <summary>
                Gets or sets the y-coordinate.
            </summary>
            <value>
                The y-coordinate.
            </value>
        </member>
        <member name="M:BotBits.SendMessages.PlaceSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.BadgeChangeSendMessage">
            <summary>
                Sent to change badge.
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.BadgeChangeSendMessage.#ctor(BotBits.Badge)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.SendMessages.BadgeChangeSendMessage" /> class.
            </summary>
            <param name="badge">The badge.</param>
        </member>
        <member name="M:BotBits.SendMessages.BadgeChangeSendMessage.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.SendMessages.BadgeChangeSendMessage" /> class.
            </summary>
            <param name="badgeId">The badge identifier.</param>
        </member>
        <member name="P:BotBits.SendMessages.BadgeChangeSendMessage.Badge">
            <summary>
                Gets or sets the badge.
            </summary>
            <value>
                The badge.
            </value>
        </member>
        <member name="M:BotBits.SendMessages.BadgeChangeSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.SetEditKeySendMessage">
            <summary>
                Sent to change edit key.
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.SetEditKeySendMessage.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.SendMessages.SetEditKeySendMessage" /> class.
            </summary>
            <param name="editKey">The edit key.</param>
        </member>
        <member name="P:BotBits.SendMessages.SetEditKeySendMessage.EditKey">
            <summary>
                Gets or sets the edit key.
            </summary>
            <value>
                The edit key.
            </value>
        </member>
        <member name="M:BotBits.SendMessages.SetEditKeySendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.NameSendMessage">
            <summary>
                Sent to change world name.
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.NameSendMessage.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.SendMessages.NameSendMessage" /> class.
            </summary>
            <param name="roomName">Name of the world.</param>
        </member>
        <member name="P:BotBits.SendMessages.NameSendMessage.RoomName">
            <summary>
                Gets or sets the name of the world.
            </summary>
            <value>
                The name of the world.
            </value>
        </member>
        <member name="M:BotBits.SendMessages.NameSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.CheckpointSendMessage">
            <summary>
                Sent to change checkpoint position.
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.CheckpointSendMessage.#ctor(System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.SendMessages.CheckpointSendMessage" /> class.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
        </member>
        <member name="P:BotBits.SendMessages.CheckpointSendMessage.X">
            <summary>
                Gets or sets the x-coordinate.
            </summary>
            <value>
                The x-coordinate.
            </value>
        </member>
        <member name="P:BotBits.SendMessages.CheckpointSendMessage.Y">
            <summary>
                Gets or sets the y-coordinate.
            </summary>
            <value>
                The y-coordinate.
            </value>
        </member>
        <member name="M:BotBits.SendMessages.CheckpointSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.ClearSendMessage">
            <summary>
                Sent to clear the world.
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.ClearSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.CoinSendMessage">
            <summary>
                Sent to collect coin.
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.CoinSendMessage.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.SendMessages.CoinSendMessage" /> class.
            </summary>
            <param name="coins">The gold coins count.</param>
            <param name="blueCoins">The blue coins count.</param>
            <param name="coinX">The coin x-coordinate.</param>
            <param name="coinY">The coin y-coordinate.</param>
        </member>
        <member name="P:BotBits.SendMessages.CoinSendMessage.CoinX">
            <summary>
                Gets or sets the coin x-coordinate.
            </summary>
            <value>
                The coin x-coordinate.
            </value>
        </member>
        <member name="P:BotBits.SendMessages.CoinSendMessage.CoinY">
            <summary>
                Gets or sets the coin y-coordinate.
            </summary>
            <value>
                The coin y-coordinate.
            </value>
        </member>
        <member name="P:BotBits.SendMessages.CoinSendMessage.Coins">
            <summary>
                Gets or sets the number of yellow coins the player has.
            </summary>
            <value>
                The number of yellow coins the player has.
            </value>
        </member>
        <member name="P:BotBits.SendMessages.CoinSendMessage.BlueCoins">
            <summary>
                Gets or sets the number of blue coins the player has.
            </summary>
            <value>
                The number of blue coins the player has.
            </value>
        </member>
        <member name="M:BotBits.SendMessages.CoinSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.CompleteLevelSendMessage">
            <summary>
                Sent to complete world.
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.CompleteLevelSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.DeathSendMessage">
            <summary>
                Sent to die.
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.DeathSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.CrownSendMessage">
            <summary>
                Sent to collect gold crown.
            </summary>
        </member>
        <member name="M:BotBits.SendMessages.CrownSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.GodModeSendMessage">
            <summary>
                Sent to toggle god mode.
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.GodModeSendMessage.#ctor(System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.SendMessages.GodModeSendMessage" /> class.
            </summary>
            <param name="godModeEnabled">if set to <c>true</c> then god mode enabled.</param>
        </member>
        <member name="P:BotBits.SendMessages.GodModeSendMessage.GodModeEnabled">
            <summary>
                Gets or sets a value indicating whether god mode is enabled.
            </summary>
            <value>
                <c>true</c> if god mode is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:BotBits.SendMessages.GodModeSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.AdminModeSendMessage">
            <summary>
                Sent to toggle administrator mode.
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.AdminModeSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.Init2SendMessage">
            <summary>
                Sent to request initialization messages such as add, k, etc.
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.Init2SendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.InitSendMessage">
            <summary>
                Sent to request initialization message.
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.InitSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.KillRoomSendMessage">
            <summary>
                Sent to kill world.
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.KillRoomSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.ModModeSendMessage">
            <summary>
                Sent to toggle moderator mode.
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.ModModeSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.MoveSendMessage">
            <summary>
                Sent to move.
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.MoveSendMessage.#ctor(System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Boolean,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.SendMessages.MoveSendMessage" /> class.
            </summary>
            <param name="x">The x-coordinate of the position.</param>
            <param name="y">The y-coordinate of the position.</param>
            <param name="speedX">The horizontal speed.</param>
            <param name="speedY">The vertical speed.</param>
            <param name="modifierX">The horizontal speed modifier.</param>
            <param name="modifierY">The vertical speed modifier.</param>
            <param name="horizontal">The horizontal speed direction.</param>
            <param name="vertical">The vertical speed direction.</param>
            <param name="spaceDown">if set to <c>true</c> then spacebar is pressed.</param>
            <param name="spaceJustDown">if set to <c>true</c> the spacebar is just pressed.</param>
            <param name="tickId">The tick identifier.</param>
        </member>
        <member name="P:BotBits.SendMessages.MoveSendMessage.GravityMultiplier">
            <summary>
                Gets or sets the gravity multiplier.
            </summary>
            <value>
                The gravity multiplier.
            </value>
        </member>
        <member name="P:BotBits.SendMessages.MoveSendMessage.SpaceDown">
            <summary>
                Gets or sets a value indicating whether spacebar is pressed.
            </summary>
            <value>
                <c>true</c> if spacebar is pressed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BotBits.SendMessages.MoveSendMessage.SpaceJustDown">
            <summary>
                Gets or sets a value indicating whether space was just pressed.
            </summary>
            <value>
                <c>true</c> if space was just pressed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BotBits.SendMessages.MoveSendMessage.TickId">
            <summary>
                Gets or sets the physics tick number.
            </summary>
            <value>
                The physics tick number.
            </value>
        </member>
        <member name="P:BotBits.SendMessages.MoveSendMessage.Horizontal">
            <summary>
                Gets or sets the horizontal speed direction.
            </summary>
            <value>
                The horizontal speed direction.
            </value>
        </member>
        <member name="P:BotBits.SendMessages.MoveSendMessage.Vertical">
            <summary>
                Gets or sets the vertical speed direction.
            </summary>
            <value>
                The vertical speed direction.
            </value>
        </member>
        <member name="P:BotBits.SendMessages.MoveSendMessage.ModifierX">
            <summary>
                Gets or sets the horizontal speed modifier.
            </summary>
            <value>
                The horizontal speed modifier.
            </value>
        </member>
        <member name="P:BotBits.SendMessages.MoveSendMessage.ModifierY">
            <summary>
                Gets or sets the vertical speed modifier.
            </summary>
            <value>
                The vertical speed modifier.
            </value>
        </member>
        <member name="P:BotBits.SendMessages.MoveSendMessage.X">
            <summary>
                Gets or sets the x-coordinate of the position.
            </summary>
            <value>
                The x-coordinate of the position.
            </value>
        </member>
        <member name="P:BotBits.SendMessages.MoveSendMessage.Y">
            <summary>
                Gets or sets the y-coordinate of the position.
            </summary>
            <value>
                The y-coordinate of the position.
            </value>
        </member>
        <member name="P:BotBits.SendMessages.MoveSendMessage.SpeedX">
            <summary>
                Gets or sets the horizontal speed.
            </summary>
            <value>
                The horizontal speed.
            </value>
        </member>
        <member name="P:BotBits.SendMessages.MoveSendMessage.SpeedY">
            <summary>
                Gets or sets the vertical speed.
            </summary>
            <value>
                The vertical speed.
            </value>
        </member>
        <member name="M:BotBits.SendMessages.MoveSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.KeyPressSendMessage">
            <summary>
                Sent to activate blue key.
            </summary>
        </member>
        <member name="M:BotBits.SendMessages.KeyPressSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.SaveSendMessage">
            <summary>
                Sent to save the world.
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.SaveSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.ChatSendMessage">
            <summary>
                Sent to say chat message.
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.ChatSendMessage.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.SendMessages.ChatSendMessage" /> class.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="P:BotBits.SendMessages.ChatSendMessage.Text">
            <summary>
                Gets or sets the text.
            </summary>
            <value>
                The text.
            </value>
        </member>
        <member name="M:BotBits.SendMessages.ChatSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.SendMessage`1">
            <summary>
                Base for send messages.
            </summary>
        </member>
        <member name="P:BotBits.SendMessages.SendMessage`1.SkipsQueue">
            <summary>
                Gets or sets a value indicating whether this message skips the send queue.
            </summary>
            <value>
                <c>true</c> if this message skips the send queue; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BotBits.SendMessages.SendMessage`1.NoChecks">
            <summary>
                Gets or sets a value indicating whether this message checks for redundancies before being sent.
            </summary>
            <value>
                <c>true</c> if this message has redundancy checks disabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BotBits.SendMessages.SendMessage`1.InstantSend">
            <summary>
                Gets or sets a value indicating whether this message is instantly sent without entering the queue.
            </summary>
            <value>
                <c>true</c> if this message does not enter the queue; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BotBits.SendMessages.SendMessage`1.SendCount">
            <summary>
                Gets the number of times SendIn was called on this message.
            </summary>
            <value>
                The send count.
            </value>
        </member>
        <member name="M:BotBits.SendMessages.SendMessage`1.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.ResetSendMessage">
            <summary>
                Sent to reset progress.
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.ResetSendMessage.#ctor(System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.SendMessages.ResetSendMessage" /> class.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
        </member>
        <member name="P:BotBits.SendMessages.ResetSendMessage.X">
            <summary>
                Gets or sets the x-coordinate.
            </summary>
            <value>
                The x-coordinate.
            </value>
        </member>
        <member name="P:BotBits.SendMessages.ResetSendMessage.Y">
            <summary>
                Gets or sets the y-coordinate.
            </summary>
            <value>
                The y-coordinate.
            </value>
        </member>
        <member name="M:BotBits.SendMessages.ResetSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.TouchDiamondSendMessage">
            <summary>
                Sent to touch a diamond
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.TouchDiamondSendMessage.#ctor(System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.SendMessages.TouchDiamondSendMessage" /> class.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
        </member>
        <member name="P:BotBits.SendMessages.TouchDiamondSendMessage.X">
            <summary>
                Gets or sets the x-coordinate.
            </summary>
            <value>
                The x-coordinate.
            </value>
        </member>
        <member name="P:BotBits.SendMessages.TouchDiamondSendMessage.Y">
            <summary>
                Gets or sets the y-coordinate.
            </summary>
            <value>
                The y-coordinate.
            </value>
        </member>
        <member name="M:BotBits.SendMessages.TouchDiamondSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotBits.SendMessages.TouchUserSendMessage">
            <summary>
                Sent to touch other player transferring effects.
            </summary>
            <seealso cref="T:BotBits.SendMessages.SendMessage`1" />
        </member>
        <member name="M:BotBits.SendMessages.TouchUserSendMessage.#ctor(System.Int32,BotBits.Effect)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.SendMessages.TouchUserSendMessage" /> class.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="effect">The effect being transferred.</param>
        </member>
        <member name="P:BotBits.SendMessages.TouchUserSendMessage.Effect">
            <summary>
                Gets or sets the reason (transferred potion).
            </summary>
            <value>
                The reason (transferred potion).
            </value>
        </member>
        <member name="P:BotBits.SendMessages.TouchUserSendMessage.UserId">
            <summary>
                Gets or sets the user identifier.
            </summary>
            <value>
                The user identifier.
            </value>
        </member>
        <member name="M:BotBits.SendMessages.TouchUserSendMessage.GetMessage">
            <summary>
                Gets the PlayerIO message representing the data in this <see cref="T:BotBits.SendMessages.SendMessage`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BotBits.StringUtils.DecimalToArbitrarySystem(System.Int64,System.Int32)">
            <summary>
                Converts the given decimal number to the numeral system with the
                specified radix (in the range [2, 36]).
            </summary>
            <param name="decimalNumber">The number to convert.</param>
            <param name="radix">The radix of the destination numeral system (in the range [2, 36]).</param>
            <returns></returns>
        </member>
        <member name="M:BotBits.TaskHelper.Finally(System.Threading.Tasks.Task,System.Action{System.Exception},System.Action)">
            <summary>
                Analogous to the finally block in a try/finally
            </summary>
        </member>
        <member name="T:BotBits.ChatExtensions">
            <summary>
                ChatExtensions contains functions to execute commands in game.
            </summary>
        </member>
        <member name="M:BotBits.ChatExtensions.SetTeam(BotBits.IChat,System.String,BotBits.Team)">
            <summary>
                Sets the team of the given player (/setteam &lt;username&gt; &lt;team&gt;).
            </summary>
            <param name="chat">The chat.</param>
            <param name="username">The username.</param>
            <param name="team">The team.</param>
        </member>
        <member name="M:BotBits.ChatExtensions.ClearEffects(BotBits.IChat,System.String)">
            <summary>
                Clears the effects a player has  (/cleareffects &lt;username&gt;).
            </summary>
            <param name="chat">The chat.</param>
            <param name="username">The username.</param>
        </member>
        <member name="M:BotBits.ChatExtensions.ForceFly(BotBits.IChat,System.String,System.Boolean)">
            <summary>
                Forces the player out / into god mode (/forcefly &lt;username&gt; &lt;flying&gt;).
            </summary>
            <param name="chat">The chat.</param>
            <param name="username">The username.</param>
            <param name="flying">if set to <c>true</c> the player will be forced into flying.</param>
        </member>
        <member name="M:BotBits.ChatExtensions.GiveEdit(BotBits.IChat,System.String)">
            <summary>
                Gives edit to the specified username  (/giveedit &lt;username&gt;).
            </summary>
            <param name="chat">The chat.</param>
            <param name="username">The username.</param>
        </member>
        <member name="M:BotBits.ChatExtensions.RemoveEdit(BotBits.IChat,System.String)">
            <summary>
                Removes edit from the specified username (/removeedit &lt;username&gt;).
            </summary>
            <param name="chat">The chat.</param>
            <param name="username">The username.</param>
        </member>
        <member name="M:BotBits.ChatExtensions.Teleport(BotBits.IChat,System.String)">
            <summary>
                Teleports the specified username.
            </summary>
            <param name="chat">The chat.</param>
            <param name="username">The username.</param>
        </member>
        <member name="M:BotBits.ChatExtensions.Teleport(BotBits.IChat,System.String,System.Int32,System.Int32)">
            <summary>
                Teleports the specified username. (/teleport &lt;username&gt; &lt;x&gt; &lt;y&gt;).
            </summary>
            <param name="chat">The chat.</param>
            <param name="username">The username.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:BotBits.ChatExtensions.Kick(BotBits.IChat,System.String)">
            <summary>
                Kicks the specified username (/kick &lt;username&gt;).
            </summary>
            <param name="chat">The chat.</param>
            <param name="username">The username.</param>
        </member>
        <member name="M:BotBits.ChatExtensions.Kick(BotBits.IChat,System.String,System.String)">
            <summary>
                Kicks the specified username (/kick &lt;username&gt; &lt;reason&gt;).
            </summary>
            <param name="chat">The chat.</param>
            <param name="username">The username.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:BotBits.ChatExtensions.KickGuests(BotBits.IChat)">
            <summary>
                Silently kicks all guests (/kickguests).
            </summary>
        </member>
        <member name="M:BotBits.ChatExtensions.Kill(BotBits.IChat,System.String)">
            <summary>
                Kills the specified username. (/kill &lt;username&gt;).
            </summary>
            <param name="chat">The chat.</param>
            <param name="username">The username.</param>
        </member>
        <member name="M:BotBits.ChatExtensions.KillAll(BotBits.IChat)">
            <summary>
                Kills all the users in the world (/killall).
            </summary>
        </member>
        <member name="M:BotBits.ChatExtensions.Mute(BotBits.IChat,System.String)">
            <summary>
                Mutes the specified username. (/mute &lt;username&gt;).
            </summary>
            <param name="chat">The chat.</param>
            <param name="username">The username.</param>
        </member>
        <member name="M:BotBits.ChatExtensions.Unmute(BotBits.IChat,System.String)">
            <summary>
                Unmutes the specified username. (/unmute &lt;username&gt;).
            </summary>
            <param name="chat">The chat.</param>
            <param name="username">The username.</param>
        </member>
        <member name="M:BotBits.ChatExtensions.ReportAbuse(BotBits.IChat,System.String,System.String)">
            <summary>
                Reports the specified user with the given reason (/reportabuse &lt;username&gt; &lt;reason&gt;).
            </summary>
            <param name="chat">The chat.</param>
            <param name="username">The username.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:BotBits.ChatExtensions.GiveGod(BotBits.IChat,System.String)">
            <summary>
                Enables god mode of the specified username (/givegod &lt;username&gt;).
            </summary>
            <param name="chat">The chat.</param>
            <param name="username">The username.</param>
        </member>
        <member name="M:BotBits.ChatExtensions.RemoveGod(BotBits.IChat,System.String)">
            <summary>
                Disables god mode of the specified username (/removegod &lt;username&gt;).
            </summary>
            <param name="chat">The chat.</param>
            <param name="username">The username.</param>
        </member>
        <member name="M:BotBits.ChatExtensions.GiveCrown(BotBits.IChat,System.String)">
            <summary>
                Gives the crown to the specified username (/givecrown &lt;username&gt;).
            </summary>
            <param name="chat">Chat.</param>
            <param name="username">Username.</param>
        </member>
        <member name="M:BotBits.ChatExtensions.RemoveCrown(BotBits.IChat)">
            <summary>
                Removes the crown from it's owner (/removecrown).
            </summary>
            <param name="chat">Chat.</param>
        </member>
        <member name="M:BotBits.ChatExtensions.Reset(BotBits.IChat,System.String)">
            <summary>
                Resets the users' position (/reset &lt;username&gt;).
            </summary>
        </member>
        <member name="M:BotBits.ChatExtensions.ResetAll(BotBits.IChat)">
            <summary>
                Resets all the users' positions (/resetall).
            </summary>
        </member>
        <member name="M:BotBits.ChatExtensions.RespawnAll(BotBits.IChat)">
            <summary>
                Respawns all users in the world (/respawnall).
            </summary>
        </member>
        <member name="M:BotBits.ChatExtensions.LoadLevel(BotBits.IChat)">
            <summary>
                Loads the level to the most recent saved version (/loadlevel).
            </summary>
        </member>
        <member name="M:BotBits.ChatExtensions.SetBackgroundColor(BotBits.IChat,System.String)">
            <summary>
                Sets the color of the background (/bgcolor &lt;color&gt;).
            </summary>
            <param name="chat">The chat.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:BotBits.ChatExtensions.SetBackgroundColor(BotBits.IChat,System.Byte,System.Byte,System.Byte)">
            <summary>
                Sets the color of the background (/bgcolor #rrggbb).
            </summary>
            <param name="chat">The chat.</param>
            <param name="r">The red portion of the color.</param>
            <param name="g">The green portion of the color.</param>
            <param name="b">The blue portion of the color.</param>
        </member>
        <member name="M:BotBits.ChatExtensions.ListPortals(BotBits.IChat)">
            <summary>
                Lists the portals (/listportals).
            </summary>
        </member>
        <member name="M:BotBits.ChatExtensions.Clear(BotBits.IChat)">
            <summary>
                Clears the map (/clear)
            </summary>
        </member>
        <member name="M:BotBits.ChatExtensions.GetBlockPlacer(BotBits.IChat)">
            <summary>
                Gets the block placer (/getblockplacer).
            </summary>
        </member>
        <member name="M:BotBits.ChatExtensions.GetPosition(BotBits.IChat)">
            <summary>
                Gets the position of the bot (/getpos).
            </summary>
        </member>
        <member name="M:BotBits.ChatExtensions.PrivateMessage(BotBits.IChat,System.String,System.String)">
            <summary>
                Sends a private message (/pm &lt;target&gt; &lt;message&gt;)
            </summary>
            <param name="chat">The chat.</param>
            <param name="target">The target.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:BotBits.ChatExtensions.PrivateMessage(BotBits.IChat,BotBits.Player,System.String)">
            <summary>
                Sends a private message (/pm &lt;target&gt; &lt;message&gt;)
            </summary>
            <param name="chat">The chat.</param>
            <param name="target">The target.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:BotBits.ChatExtensions.PrivateMessage(BotBits.IChat,System.String,System.String,System.Object[])">
            <summary>
                Sends a private message (/pm &lt;target&gt; &lt;message&gt;)
            </summary>
            <param name="chat">The chat.</param>
            <param name="target">The target.</param>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:BotBits.ChatExtensions.Say(BotBits.IChat,System.String,System.Object[])">
            <summary>
                Says the specified message.
            </summary>
            <param name="chat">The chat.</param>
            <param name="msg">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:BotBits.ChatExtensions.Kick(BotBits.IChat,System.String,System.String,System.Object[])">
            <summary>
                Kicks the specified username (/kick &lt;username&gt; &lt;reason&gt;).
            </summary>
            <param name="chat">The chat.</param>
            <param name="username">The username.</param>
            <param name="reason">The reason.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:BotBits.ChatExtensions.ReportAbuse(BotBits.IChat,System.String,System.String,System.Object[])">
            <summary>
                Reports the specified user with the given reason (/reportabuse &lt;username&gt; &lt;reason&gt;).
            </summary>
            <param name="chat">The chat.</param>
            <param name="username">The username.</param>
            <param name="reason">The reason.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:BotBits.ChatExtensions.Teleport(BotBits.IChat,System.String,BotBits.Point)">
            <summary>
                Teleports the specified username (/teleport &lt;username&gt; &lt;point.X+1&gt; &lt;point.Y+1&gt;).
            </summary>
            <param name="chat">The chat.</param>
            <param name="username">The username.</param>
            <param name="point">The point.</param>
        </member>
        <member name="M:BotBits.ChatExtensions.RemoveBackgroundColor(BotBits.Chat)">
            <summary>
                Removes the background color (/bgcolor none).
            </summary>
            <param name="chat">The chat.</param>
        </member>
        <member name="M:BotBits.ConnectionExtensions.Send(BotBits.IConnection,System.String,System.Object[])">
            <summary>
                Send a message to the connected client without first having to construct a Message object.
            </summary>
            <param name="connection">The connection.</param>
            <param name="type">The type of message to send</param>
            <param name="parameters">The data to put in the message to send</param>
        </member>
        <member name="M:BotBits.ConnectionExtensions.AddOnMessage(BotBits.IConnection,PlayerIOClient.MessageReceivedEventHandler)">
            <summary>
                Add a message handler to the OnMessage event
            </summary>
        </member>
        <member name="M:BotBits.ConnectionExtensions.AddOnDisconnect(BotBits.IConnection,PlayerIOClient.DisconnectEventHandler)">
            <summary>
                Add a disconnect handler to the OnDisconnect event
            </summary>
        </member>
        <member name="P:BotBits.IConnection.Connected">
            <summary>
                Gets a value indicating whether this <see cref="T:BotBits.IConnection" /> is connected.
            </summary>
            <value>
                <c>true</c> if connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:BotBits.IConnection.Send(PlayerIOClient.Message)">
            <summary>
                Sends the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:BotBits.IConnection.Disconnect">
            <summary>
                Disconnects this instance.
            </summary>
        </member>
        <member name="E:BotBits.IConnection.OnMessage">
            <summary>
                Occurs when a message is received.
            </summary>
        </member>
        <member name="E:BotBits.IConnection.OnDisconnect">
            <summary>
                Occurs when this instance is disconnected.
            </summary>
        </member>
        <member name="T:BotBits.AccessRight">
            <summary>
                Represents the rights of the bot connection in the world.
            </summary>
        </member>
        <member name="F:BotBits.AccessRight.None">
            <summary>
                Represents the state where the bot doesn't have any rights in the world.
            </summary>
        </member>
        <member name="F:BotBits.AccessRight.WorldOptions">
            <summary>
                Represents the state where the bot can change world options.
            </summary>
        </member>
        <member name="F:BotBits.AccessRight.Owner">
            <summary>
                Represents the state where bot has command access and edit rights in the world.
            </summary>
        </member>
        <member name="T:BotBits.Key">
            <summary>
                Describes the door/gate which state has just been changed.
            </summary>
        </member>
        <member name="F:BotBits.Key.Red">
            <summary>
                The red door/gate
            </summary>
        </member>
        <member name="F:BotBits.Key.Green">
            <summary>
                The green door/gate
            </summary>
        </member>
        <member name="F:BotBits.Key.Blue">
            <summary>
                The blue door/gate
            </summary>
        </member>
        <member name="F:BotBits.Key.Cyan">
            <summary>
                The cyan door/gate
            </summary>
        </member>
        <member name="F:BotBits.Key.Magenta">
            <summary>
                The magenta door/gate
            </summary>
        </member>
        <member name="F:BotBits.Key.Yellow">
            <summary>
                The yellow door/gate
            </summary>
        </member>
        <member name="F:BotBits.Key.TimeDoor">
            <summary>
                The timed door/gate
            </summary>
        </member>
        <member name="T:BotBits.Layer">
            <summary>
                Describes the layer where a block is located on.
            </summary>
        </member>
        <member name="F:BotBits.Layer.Foreground">
            <summary>
                The foreground layer (contains solid, action, and decoration blocks).
            </summary>
        </member>
        <member name="F:BotBits.Layer.Background">
            <summary>
                The background layer (contains background blocks).
            </summary>
        </member>
        <member name="T:BotBits.EventListenerAttribute">
            <summary>
                Indicates that a function is a handler for a specific event.
            </summary>
        </member>
        <member name="M:BotBits.EventListenerAttribute.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.EventListenerAttribute" /> class.
            </summary>
        </member>
        <member name="M:BotBits.EventListenerAttribute.#ctor(BotBits.EventPriority)">
            <summary>
                Initializes a new instance of the <see cref="T:BotBits.EventListenerAttribute" /> class.
            </summary>
            <param name="priority">The priority of this event handler.</param>
        </member>
        <member name="P:BotBits.EventListenerAttribute.Priority">
            <summary>
                Gets the priority of this event handler.
            </summary>
            <value>
                The priority of this event handler.
            </value>
        </member>
        <member name="P:BotBits.MessageServices.SkipQueues">
            <summary>
                Gets a value indicating whether SendMessages raised on this thread skip queues.
            </summary>
            <value>
                <c>true</c> if skip queues is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BotBits.MessageServices.NoChecks">
            <summary>
                Gets a value indicating whether SendMessages raised on this thread are sent without any redundancy checks.
            </summary>
            <value>
                <c>true</c> if force send is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BotBits.MessageServices.InstantSend">
            <summary>
                Gets a value indicating whether SendMessages raised on this thread are sent without entering any queues.
            </summary>
            <value>
                <c>true</c> if instant send is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:BotBits.MessageServices.EnableSkipsQueue(System.Action)">
            <summary>
                Enables the skip queue feature for SendMessages that are sent using the given callback.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="M:BotBits.MessageServices.EnableNoChecks(System.Action)">
            <summary>
                Enables the force send feature for SendMessages that are sent using the given callback.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="M:BotBits.MessageServices.EnableInstantSend(System.Action)">
            <summary>
                Enables the instant send feature for SendMessages that are sent using the given callback.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="F:BotBits.BackgroundType.Normal">
            <summary>
                A normal block
            </summary>
        </member>
        <member name="P:BotBits.Player.Username">
            <summary>
                Gets the player's username.
            </summary>
            <value>
                The player's username.
            </value>
        </member>
        <member name="P:BotBits.Player.UserId">
            <summary>
                Gets the player's user identifier.
            </summary>
            <value>
                The player's user identifier.
            </value>
        </member>
        <member name="P:BotBits.Player.GodMode">
            <summary>
                Gets a value indicating whether this player has god mode enabled.
            </summary>
            <value>
                <c>true</c> if this this player has god mode enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BotBits.Player.AdminMode">
            <summary>
                Gets a value indicating whether this player has admin mode enabled.
            </summary>
            <value>
                <c>true</c> if this player has admin mode enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BotBits.Player.ModMode">
            <summary>
                Gets a value indicating whether this player has moderator mode enabled.
            </summary>
            <value>
                <c>true</c> if this player has moderator mode enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BotBits.Player.Friend">
            <summary>
                Gets a value indicating whether this player is the bot user's friend.
            </summary>
            <value>
                <c>true</c> if this player is the bot user's friend; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BotBits.Player.ClubMember">
            <summary>
                Gets a value indicating whether this player is a Builder's Club member.
            </summary>
            <value>
                <c>true</c> if this player is a Builder's Club member; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BotBits.Player.Connected">
            <summary>
                Gets a value indicating whether this player is connected.
            </summary>
            <value>
                <c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BotBits.Player.ConnectUserId">
            <summary>
                Gets or sets the user identifier unique to this user's account.
            </summary>
            <value>
                The user identifier.
            </value>
        </member>
        <member name="P:BotBits.Player.HasChat">
            <summary>
                Gets a value indicating whether this player has chat access.
            </summary>
            <value>
                <c>true</c> if this player has chat access; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BotBits.Player.Smiley">
            <summary>
                Gets the player's smiley.
            </summary>
            <value>
                The player's smiley.
            </value>
        </member>
        <member name="P:BotBits.Player.AuraColor">
            <summary>
                Gets the aura color that apperars around this user when they go in god mode.
            </summary>
            <value>
                The aura color.
            </value>
        </member>
        <member name="P:BotBits.Player.AuraShape">
            <summary>
                Gets the aura shape that apperars around this user when they go in god mode.
            </summary>
            <value>
                The aura shape.
            </value>
        </member>
        <member name="P:BotBits.Player.Badge">
            <summary>
                Gets the badge this player has selected.
            </summary>
            <value>
                The badge.
            </value>
        </member>
        <member name="P:BotBits.Player.GoldCoins">
            <summary>
                Gets the player's number of coins.
            </summary>
            <value>
                The player's number of coins.
            </value>
        </member>
        <member name="P:BotBits.Player.BlueCoins">
            <summary>
                Gets the player's number of blue coins.
            </summary>
            <value>
                The player's number of blue coins.
            </value>
        </member>
        <member name="P:BotBits.Player.X">
            <summary>
                Gets the x-coordinate of the player's current position.
            </summary>
            <value>
                The x-coordinate of the player's current position.
            </value>
        </member>
        <member name="P:BotBits.Player.Y">
            <summary>
                Gets the y-coordinate of the player's current position.
            </summary>
            <value>
                The y-coordinate of the player's current position.
            </value>
        </member>
        <member name="P:BotBits.Player.SpeedX">
            <summary>
                Gets the player's horizontal speed.
            </summary>
            <value>
                The player's horizontal speed.
            </value>
        </member>
        <member name="P:BotBits.Player.SpeedY">
            <summary>
                Gets the player's vertical speed.
            </summary>
            <value>
                The player's vertical speed
            </value>
        </member>
        <member name="P:BotBits.Player.ModifierX">
            <summary>
                Gets the player's horizontal speed modifier.
            </summary>
            <value>
                The player's horizontal speed modifier.
            </value>
        </member>
        <member name="P:BotBits.Player.ModifierY">
            <summary>
                Gets the player's vertical speed modifier.
            </summary>
            <value>
                The player's vertical speed modifier.
            </value>
        </member>
        <member name="P:BotBits.Player.Horizontal">
            <summary>
                Gets the player's horizontal speed direction.
            </summary>
            <value>
                The player's horizontal speed direction.
            </value>
        </member>
        <member name="P:BotBits.Player.Vertical">
            <summary>
                Gets the player's vertical speed direction.
            </summary>
            <value>
                The player's vertical speed direction.
            </value>
        </member>
        <member name="P:BotBits.Player.SpaceDown">
            <summary>
                Gets or sets a value indicating whether the player is pressing spacebar.
            </summary>
            <value>
                <c>true</c> if the player is pressing spacebar; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BotBits.Player.SpaceJustDown">
            <summary>
                Gets a value indicating whether has just pressed spacebar.
            </summary>
            <value>
                <c>true</c> if space was just pressed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BotBits.Player.HasSilverCrown">
            <summary>
                Gets a value indicating whether this player has a silver crown.
            </summary>
            <value>
                <c>true</c> if this player has a silver crown; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BotBits.Player.Team">
            <summary>
                Gets the team this user is in.
            </summary>
            <value>
                The team.
            </value>
        </member>
        <member name="P:BotBits.Player.HasCrown">
            <summary>
                Gets a value indicating whether this player has a crown.
            </summary>
            <value>
                <c>true</c> if this player has a crown; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BotBits.Player.ChatColor">
            <summary>
                Gets the color of this user's name when he/she chats.
            </summary>
            <value>
                The color of the chat.
            </value>
        </member>
        <member name="P:BotBits.Player.CrewMember">
            <summary>
                Gets a value indicating whether this player is a crew member.
            </summary>
            <value>
                <c>true</c> if the player is a crew member; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BotBits.Player.Flying">
            <summary>
                Gets a value indicating whether this player is flying using god mode, admin mode or moderator mode.
            </summary>
            <value>
                <c>true</c> if this player is flying using god mode, admin mode or moderator mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BotBits.Player.Guest">
            <summary>
                Gets a value indicating whether this player is a guest.
            </summary>
            <value>
                <c>true</c> if this player is a guest; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BotBits.Player.ChatName">
            <summary>
                Gets the player's chat name.
            </summary>
            <value>
                The player's chat name.
            </value>
        </member>
        <member name="P:BotBits.Player.Owner">
            <summary>
                Gets a value indicating whether this <see cref="T:BotBits.Player" /> is the room owner.
            </summary>
            <value>
                <c>true</c> if owner; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BotBits.Player.BlockX">
            <summary>
                Gets the x-coordinate of the block that the player is located on.
            </summary>
            <value>
                The x-coordinate of the block that the player is located on.
            </value>
        </member>
        <member name="P:BotBits.Player.BlockY">
            <summary>
                Gets the y-coordinate of the block that the player is located on.
            </summary>
            <value>
                The y-coordinate of the block that the player is located on.
            </value>
        </member>
        <member name="M:BotBits.Player.IsGuest(System.String)">
            <summary>
                Determines whether the player with the specified username is a guest.
            </summary>
            <param name="username">The player's username.</param>
            <returns></returns>
        </member>
        <member name="M:BotBits.Player.GetChatName(System.String)">
            <summary>
                Gets the chat name of the specified player.
            </summary>
            <param name="username">The player's username.</param>
            <returns></returns>
        </member>
        <member name="E:BotBits.SendTimer.Elapsed">
            <summary>
                Occurs when [elapsed].
            </summary>
        </member>
        <member name="T:BotBits.ForegroundType">
            <summary>
                Represents the types a <see cref="T:BotBits.Foreground" /> can be.
            </summary>
        </member>
        <member name="F:BotBits.ForegroundType.Normal">
            <summary>
                A normal block
            </summary>
        </member>
        <member name="F:BotBits.ForegroundType.Toggle">
            <summary>
                A toggle block
            </summary>
        </member>
        <member name="F:BotBits.ForegroundType.ToggleGoal">
            <summary>
                A goal block that can be toggled
            </summary>
        </member>
        <member name="F:BotBits.ForegroundType.Team">
            <summary>
                A coin door block
            </summary>
        </member>
        <member name="F:BotBits.ForegroundType.Goal">
            <summary>
                A coin door block
            </summary>
        </member>
        <member name="F:BotBits.ForegroundType.Portal">
            <summary>
                A portal block
            </summary>
        </member>
        <member name="F:BotBits.ForegroundType.Label">
            <summary>
                A label block
            </summary>
        </member>
        <member name="F:BotBits.ForegroundType.Sign">
            <summary>
                A sign
            </summary>
        </member>
        <member name="F:BotBits.ForegroundType.Note">
            <summary>
                A piano/drum block
            </summary>
        </member>
        <member name="F:BotBits.ForegroundType.Morphable">
            <summary>
                A morphable block
            </summary>
        </member>
        <member name="F:BotBits.ForegroundType.WorldPortal">
            <summary>
                A world portal block
            </summary>
        </member>
        <member name="P:BotBits.ForegroundBlock.Id">
            <summary>
                Gets the block.
            </summary>
            <value>
                The block.
            </value>
        </member>
        <member name="P:BotBits.ForegroundBlock.Type">
            <summary>
                Gets the type.
            </summary>
            <value>
                The type.
            </value>
        </member>
        <member name="P:BotBits.ForegroundBlock.Text">
            <summary>
                Gets the Text. (Only on label / world portal / sign blocks)
            </summary>
            <value>
                The text.
            </value>
            <exception cref="T:System.InvalidOperationException">
                This property can only be accessed on label, world portal and sign
                blocks.
            </exception>
        </member>
        <member name="P:BotBits.ForegroundBlock.TextColor">
            <summary>
                Gets the color. (Only on label blocks)
            </summary>
            <value>
                The color.
            </value>
            <exception cref="T:System.InvalidOperationException">This property can only be accessed on label blocks.</exception>
        </member>
        <member name="P:BotBits.ForegroundBlock.Enabled">
            <summary>
                Gets the toggled state. (Only on toggle)
            </summary>
            <value>
                The toggle state.
            </value>
            <exception cref="T:System.InvalidOperationException">This property can only be accessed on toggle blocks.</exception>
        </member>
        <member name="P:BotBits.ForegroundBlock.Goal">
            <summary>
                Gets the goal. (Only on goal blocks)
            </summary>
            <value>
                The goal.
            </value>
            <exception cref="T:System.InvalidOperationException">This property can only be accessed on goal blocks.</exception>
        </member>
        <member name="P:BotBits.ForegroundBlock.Morph">
            <summary>
                Gets the morph. (Only on morphable blocks)
            </summary>
            <value>
                The morph.
            </value>
            <exception cref="T:System.InvalidOperationException">This property can only be accessed on morphable blocks.</exception>
        </member>
        <member name="P:BotBits.ForegroundBlock.PortalId">
            <summary>
                Gets the portal identifier.  (Only on portal blocks)
            </summary>
            <value>
                The portal identifier.
            </value>
            <exception cref="T:System.InvalidOperationException">This property can only be accessed on Portal blocks.</exception>
        </member>
        <member name="P:BotBits.ForegroundBlock.PortalTarget">
            <summary>
                Gets the portal target.  (Only on portal blocks)
            </summary>
            <value>
                The portal target.
            </value>
            <exception cref="T:System.InvalidOperationException">This property can only be accessed on Portal blocks.</exception>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
                Indicates that the value of the marked element could be <c>null</c> sometimes,
                so the check for <c>null</c> is necessary before its usage
            </summary>
            <example>
                <code>
            [CanBeNull] public object Test() { return null; }
            public void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
                Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example>
                <code>
            [NotNull] public object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
                Indicates that the marked method builds string by format pattern and (optional) arguments.
                Parameter, which contains format string, should be given in constructor. The format string
                should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" />-like form
            </summary>
            <example>
                <code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args) { /* do something */ }
            public void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code>
            </example>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
                Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
                Indicates that the function argument should be string literal and match one
                of the parameters of the caller function. For example, ReSharper annotates
                the parameter of <see cref="T:System.ArgumentNullException" />
            </summary>
            <example>
                <code>
            public void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute">
            <summary>
                Indicates that the method is contained in a type that implements
                <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> interface
                and this method is used to notify that some property value changed
            </summary>
            <remarks>
                The method should be non-static and conform to one of the supported signatures:
                <list>
                    <item>
                        <c>NotifyChanged(string)</c>
                    </item>
                    <item>
                        <c>NotifyChanged(params string[])</c>
                    </item>
                    <item>
                        <c>NotifyChanged{T}(Expression{Func{T}})</c>
                    </item>
                    <item>
                        <c>NotifyChanged{T,U}(Expression{Func{T,U}})</c>
                    </item>
                    <item>
                        <c>SetProperty{T}(ref T, T, string)</c>
                    </item>
                </list>
            </remarks>
            <example>
                <code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               private string _name;
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
                Examples of generated notifications:
                <list>
                    <item>
                        <c>NotifyChanged("Property")</c>
                    </item>
                    <item>
                        <c>NotifyChanged(() =&gt; Property)</c>
                    </item>
                    <item>
                        <c>NotifyChanged((VM x) =&gt; x.Property)</c>
                    </item>
                    <item>
                        <c>SetProperty(ref myField, value, "Property")</c>
                    </item>
                </list>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>
                Describes dependency between method input and output
            </summary>
            <syntax>
                <p>Function Definition Table syntax:</p>
                <list>
                    <item>FDT      ::= FDTRow [;FDTRow]*</item>
                    <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
                    <item>Input    ::= ParameterName: Value [, Input]*</item>
                    <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
                    <item>Value    ::= true | false | null | notnull | canbenull</item>
                </list>
                If method has single input parameter, it's name could be omitted.<br />
                Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
                for method output means that the methos doesn't return normally.<br />
                <c>canbenull</c> annotation is only applicable for output parameters.<br />
                You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
                or use single attribute with rows separated by semicolon.<br />
            </syntax>
            <examples>
                <list>
                    <item>
                        <code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code>
                    </item>
                    <item>
                        <code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code>
                    </item>
                    <item>
                        <code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code>
                    </item>
                    <item>
                        <code>
            // A method that returns null if the parameter is null, and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code>
                    </item>
                    <item>
                        <code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code>
                    </item>
                </list>
            </examples>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
                Indicates that marked element should be localized or not
            </summary>
            <example>
                <code>
            [LocalizationRequiredAttribute(true)]
            public class Foo {
              private string str = "my string"; // Warning: Localizable string
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
                Indicates that the value of the marked type (or its derivatives)
                cannot be compared using '==' or '!=' operators and <c>Equals()</c>
                should be used instead. However, using '==' or '!=' for comparison
                with <c>null</c> is always permitted.
            </summary>
            <example>
                <code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            class UsesNoEquality {
              public void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
                When applied to a target attribute, specifies a requirement for any type marked
                with the target attribute to implement or inherit specific type or types.
            </summary>
            <example>
                <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute { }
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent { }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
                Indicates that the marked symbol is used implicitly
                (e.g. via reflection, in external library), so this symbol
                will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
                Should be used on attributes and causes ReSharper
                to not mark symbols marked with such attributes as unused
                (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
                Indicates implicit instantiation of a type with fixed constructor signature.
                That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type</summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
                Specify what is considered used implicitly
                when marked with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute" />
                or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute" />
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used</summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
                This attribute is intended to mark publicly available API
                which should not be removed and so is treated as used
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
                Tells code analysis engine if the parameter is completely handled
                when the invoked method is on stack. If the parameter is a delegate,
                indicates that delegate is executed while the method is executed.
                If the parameter is an enumerable, indicates that it is enumerated
                while the method is executed
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
            <summary>
                Indicates that a method does not make any observable state changes.
                The same as <c>System.Diagnostics.Contracts.PureAttribute</c>
            </summary>
            <example>
                <code>
            [Pure] private int Multiply(int x, int y) { return x * y; }
            public void Foo() {
              const int a = 2, b = 2;
              Multiply(a, b); // Waring: Return value of pure method is not used
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.PathReferenceAttribute">
            <summary>
                Indicates that a parameter is a path to a file or a folder
                within a web project. Path can be relative or absolute,
                starting from web root (~)
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
                is an MVC action. If applied to a method, the MVC action name is calculated
                implicitly from the context. Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcAreaAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcControllerAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that
                the parameter is an MVC controller. If applied to a method,
                the MVC controller name is calculated implicitly from the context.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcMasterAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC Master.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Controller.View(String, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcModelTypeAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC model type.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Controller.View(String, Object)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcPartialViewAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that
                the parameter is an MVC partial view. If applied to a method,
                the MVC partial view name is calculated implicitly from the context.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcSupressViewErrorAttribute">
            <summary>
                ASP.NET MVC attribute. Allows disabling all inspections
                for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcTemplateAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
                Use this attribute for custom wrappers similar to
                <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
                is an MVC view. If applied to a method, the MVC view name is calculated implicitly
                from the context. Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Controller.View(Object)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionSelectorAttribute">
            <summary>
                ASP.NET MVC attribute. When applied to a parameter of an attribute,
                indicates that this parameter is an MVC action name
            </summary>
            <example>
                <code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.RazorSectionAttribute">
            <summary>
                Razor attribute. Indicates that a parameter or a method is a Razor section.
                Use this attribute for custom wrappers similar to
                <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>
            </summary>
        </member>
    </members>
</doc>
